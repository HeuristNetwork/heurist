// FAIMS PROJECT Default Logic file 12/9/13
// This file is a placeholder for a later version which will be templated to provide logic for the FAIMS Android app
getDefaultUsersList() {
	users = fetchAll("select userid, fname ||' ' || lname from user");
	return users;
}

usersList = getDefaultUsersList();

populateListForUsers(){
	populateList("user/tab1/users", usersList);
}

login(){
	Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
	user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
	setUser(user);
	showTabGroup("menu");
}

populateListForUsers();

onEvent("user/tab1/users", "click", "login()");

createOption(id, name) {
	ArrayList option = new ArrayList();
	option.add(id);
	option.add(name);
	return option;
}

options = new ArrayList();
options.add(createOption("entity", "Create Entity"));
options.add(createOption("relationship", "Create Relationship"));
options.add(createOption("add", "Add Relationship Member"));
options.add(createOption("controls", "Controls"));

populateList("menu/tab1/options", options);

onClickOption() {
	String value = getListItemValue();
	if ("entity".equals(value)) {
		showTabGroup("tabgroup1");
	} else if ("relationship".equals(value)) {
		showTabGroup("tabgroup2");
	} else if ("add".equals(value)) {
		showTabGroup("tabgroup4");
	} else {
		showTabGroup("tabgroup3");
	}
}

onEvent("menu/tab1/options", "click", "onClickOption()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
	setSyncEnabled(true);
	setFileSyncEnabled(true);
}

stopSync() {
	setSyncEnabled(false);
}

syncStarted() {
	//showToast("starting sync");
}

syncCompleted() {
	//showToast("completed sync");
	updateAll();
}

syncFailed() {
	//showToast("failed sync");
}

onSyncEvent("syncStarted()", "syncCompleted()", "syncFailed()");

ArrayList types = new ArrayList();
types.add("AboveBelow");
types.add("NextTo");
populateDropDown("tabgroup2/tab1/type", types);

Object locations = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';");

String entity_id = null;

saveEntity() {
	updateEntity();
}

loadEntity() {
	clearEntity();

	entity_id = getFieldValue("tabgroup1/tab2/entities");
	
	if (isNull(entity_id)) return;
	
	showTab("tabgroup1/tab1", entity_id);
	
	loadFileAttributes();
}

loadFileAttributes(){
	pictures.clear();
	videos.clear();
	audios.clear();
	files.clear();
	
	archEntity = fetchArchEnt(entity_id);
	
	if (archEntity.isForked()) {
		showToast("Entity contains conflicts");
	}
	
	entityAttributes = archEntity.getAttributes();
	for(EntityAttribute attr : entityAttributes){
		if("file".equals(attr.getType())){
			if("picture".equals(attr.getName())){
				pictures.add(getAttachedFilePath(attr.getText()));
			}else if("video".equals(attr.getName())){
				videos.add(getAttachedFilePath(attr.getText()));
			}else if("audio".equals(attr.getName())){
				audios.add(attr.getText());
			}else if ("file".equals(attr.getName())){
				files.add(attr.getText());
			}
		}
	}
	
	populateCameraPictureGallery("tabgroup1/tab1/pictures", pictures);
	populateVideoGallery("tabgroup1/tab1/videos", videos);
	populateCheckBoxGroup("tabgroup1/tab1/audios", audios);
	populateCheckBoxGroup("tabgroup1/tab1/files", files);
	
	setFieldValue("tabgroup1/tab1/pictures", pictures);
	setFieldValue("tabgroup1/tab1/videos", videos);
	setFieldValue("tabgroup1/tab1/audios", convertListToPairs(audios));
	setFieldValue("tabgroup1/tab1/files", convertListToPairs(files));
}

updateEntity() {
	if (isNull(entity_id)) entity_id = null;
	
	showBusyDialog();
	
	entitySaved = false;

	ArrayList loadedFiles = new ArrayList();
	ArrayList loadedPictures = new ArrayList();
	ArrayList loadedVideos = new ArrayList();
	ArrayList loadedAudios = new ArrayList();
	ArrayList locations = new ArrayList();
	List attributes = createAttributeList();
	if (entity_id == null) {
		attributes.add(createEntityAttribute("entity", "Small " + entityCount++, null, null, null));
	}else{
		archEntity = fetchArchEnt(entity_id);
		entityAttributes = archEntity.getAttributes();
		for(EntityAttribute attr : entityAttributes){
			if("file".equals(attr.getType())){
				if("picture".equals(attr.getName())){
					loadedPictures.add(getAttachedFilePath(attr.getText()));
				}else if("video".equals(attr.getName())){
					loadedVideos.add(getAttachedFilePath(attr.getText()));
				}else if("audio".equals(attr.getName())){
					loadedAudios.add(attr.getText());
				}else if("file".equals(attr.getName())){
					loadedFiles.add(attr.getText());
				}
			}
			
			if ("location".equals(attr.getName())) {
				locations.add(attr);
			}
		}
	}
	
	attributes.add(createEntityAttribute("name", getFieldValue("tabgroup1/tab1/name"), null, null, getFieldCertainty("tabgroup1/tab1/name")));
	attributes.add(createEntityAttribute("value", getFieldAnnotation("tabgroup1/tab1/value"), null, getFieldValue("tabgroup1/tab1/value"), getFieldCertainty("tabgroup1/tab1/value")));
	attributes.add(createEntityAttribute("timestamp", getFieldValue("tabgroup1/tab1/timestamp"), null, null, null));
	
	Object values = getFieldValue("tabgroup1/tab1/location");
	
	// delete locations that no longer exist
	for (Object loc : locations) {
		boolean hasLoc = false;
		for (Object value : values) {
			if (value.getName().equals(loc.getVocab())) {
				hasLoc = true;
			}
		}
		if (!hasLoc) {
			attributes.add(createEntityAttribute("location", loc.getText(), loc.getVocab(), loc.getMeasure(), loc.getCertainty(), true));
		}
	}
	
	for (Object value : values) {
		attributes.add(createEntityAttribute("location", getFieldAnnotation("tabgroup1/tab1/location"), value.getName(), null, getFieldCertainty("tabgroup1/tab1/location")));
	}
	
	saveFiles(loadedFiles, convertPairsToList(getFieldValue("tabgroup1/tab1/files")), "file", attributes); 
	saveFiles(loadedPictures, getFieldValue("tabgroup1/tab1/pictures"), "picture", attributes);
	saveFiles(loadedVideos, getFieldValue("tabgroup1/tab1/videos"), "video", attributes);
	saveFiles(loadedAudios, convertPairsToList(getFieldValue("tabgroup1/tab1/audios")), "audio", attributes);
	
	entityCallback = "loadFileAttributes()";

	entity_id = saveArchEnt(entity_id, "small", null, attributes);
	
	entitySaved = true;
	
	checkFilesAttached();
	
	updateAll();
}

isNull(value) {
	return value == null || "".equals(value);
}

hasFile(files, filename) {
	for (String f : files) {
		if (f.equals(filename)) return true;
	}
	return false;
}

Dialog d = null;

showBusyDialog() {
	if (d == null) {
		d = showBusy("Message", "Please wait while attachments are copied.");
	}
}

closeBusyDialog() {
	if (d != null) {
		d.dismiss();
		d = null;
	}
}

OnFilesAttached() {
	checkFilesAttached();
}

entityCallback = null;
entitySaved = false;

checkFilesAttached() {
	if (isAttachingFiles()) return;
	
	if (entitySaved) {
		closeBusyDialog();
		showToast("Finish saving record.");
		
		if (entityCallback != null) {
			execute(entityCallback);
		}
	}
}

saveFiles(loadedFiles, files, type, attributes) {
	System.out.println("loaded:" + loadedFiles);
	System.out.println("files:" + files);

	if (isNull(files)) {
		files = new ArrayList();
	}

	// delete attributes that are not included
	for (String file : loadedFiles) {
		if (!hasFile(files, file)) {
			attributes.add(createEntityAttribute(type, stripAttachedFilePath(file), null, null, null, true));
		}
	}

	// add new attributes that are included
	hasAttachment = false;
	for (String file : files) {
		String filename = null;
		if (!hasFile(loadedFiles, file)) {
			hasAttachment = true;
			filename = attachFile(file, "1".equals(getFieldValue("tabgroup1/tab1/sync")), null, "OnFilesAttached()");
		} else {
			for (String f : loadedFiles) {
				if (f.equals(file)) {
					filename = f;
					break;
				}
			}
		}
		attributes.add(createEntityAttribute(type, stripAttachedFilePath(filename), null, null, null));
	}

	if (!hasAttachment) {
		OnFilesAttached();
	}
}

clearEntity() {
	entity_id = null;
	
	newTab("tabgroup1/tab1");
	
	files.clear();
	pictures.clear();
	videos.clear();
	audios.clear();
	populateCameraPictureGallery("tabgroup1/tab1/pictures", pictures);
	populateVideoGallery("tabgroup1/tab1/videos", videos);
	populateCheckBoxGroup("tabgroup1/tab1/files", files);
	populateCheckBoxGroup("tabgroup1/tab1/audios", audios);
	
	populateCheckBoxGroup("tabgroup1/tab1/location", locations);
	
	setFieldValue("tabgroup1/tab1/timestamp", getCurrentTime());
}

deleteEntity(){
	if (isNull(entity_id)) return;
	deleteArchEnt(entity_id);
	entity_id = null;
    cancelTabGroup("tabgroup1", false);
}

ArrayList pictures = new ArrayList();

takePicture() {
	openCamera("OnPictureTaken()");
}

OnPictureTaken() {
	pictureFilepath = getLastPictureFilePath();
	pictures.add(pictureFilepath);
	selectedPictures = null;
    if (isNull(getFieldValue("tabgroup1/tab1/pictures"))) {
    	selectedPictures = new ArrayList();
    	selectedPictures.add(pictureFilepath);
    } else {
    	selectedPictures = getFieldValue("tabgroup1/tab1/pictures");
    	selectedPictures.add(pictureFilepath);
    }
    populateCameraPictureGallery("tabgroup1/tab1/pictures", pictures);
    setFieldValue("tabgroup1/tab1/pictures", selectedPictures);
}

ArrayList videos = new ArrayList();

takeVideo() {
	openVideo("OnVideoTaken()");
}

OnVideoTaken() {
	videoFilepath = getLastVideoFilePath();
	videos.add(videoFilepath);
    selectedVideos = null;
    if (isNull(getFieldValue("tabgroup1/tab1/videos"))) {
    	selectedVideos = new ArrayList();
    	selectedVideos.add(videoFilepath);
    } else {
    	selectedVideos = getFieldValue("tabgroup1/tab1/videos");
    	selectedVideos.add(videoFilepath);
    }
    populateVideoGallery("tabgroup1/tab1/videos", videos);
    setFieldValue("tabgroup1/tab1/videos", selectedVideos);
}

ArrayList audios = new ArrayList();

recordAudio(){
	recordAudio("OnAudioRecorded()");
}

OnAudioRecorded(){
	audioFilePath = getLastAudioFilePath();
	audios.add(audioFilePath);
	selectedAudios = null;
    if (isNull(getFieldValue("tabgroup1/tab1/audios"))) {
    	selectedAudios = new ArrayList();
    	selectedAudios.add(audioFilePath);
    } else {
    	selectedAudios = convertPairsToList(getFieldValue("tabgroup1/tab1/audios"));
    	selectedAudios.add(audioFilePath);
    }
    populateCheckBoxGroup("tabgroup1/tab1/audios", audios);
    setFieldValue("tabgroup1/tab1/audios", convertListToPairs(selectedAudios));
}

ArrayList files = new ArrayList();

attachFile() {
	showFileBrowser("setFilename()");
}

setFilename() {
	filePath = getLastSelectedFilepath();
	files.add(filePath);
	selectedFiles = null;
    if (isNull(getFieldValue("tabgroup1/tab1/files"))) {
    	selectedFiles = new ArrayList();
    	selectedFiles.add(filePath);
    } else {
    	selectedFiles = convertPairsToList(getFieldValue("tabgroup1/tab1/files"));
    	selectedFiles.add(filePath);
    }
    populateCheckBoxGroup("tabgroup1/tab1/files", files);
    setFieldValue("tabgroup1/tab1/files", convertListToPairs(selectedFiles));
}

convertPairsToList(pairs) {
	if (pairs == null) return new ArrayList();
	ArrayList list = new ArrayList();
	for (NameValuePair p : pairs) {
		list.add(p.getName());
	}
	return list;
}

convertListToPairs(list) {
	if (list == null) return new ArrayList();
	ArrayList pairs = new ArrayList();
	for (String s : list) {
		pairs.add(new NameValuePair(s, "true"));
	}
	return pairs;
}

onEvent("tabgroup1/tab1/attachpicture", "click", "takePicture()");
onEvent("tabgroup1/tab1/attachvideo", "click", "takeVideo()");
onEvent("tabgroup1/tab1/attachaudio", "click", "recordAudio()");
onEvent("tabgroup1/tab1/attachfile", "click", "attachFile()");
onEvent("tabgroup1/tab1/viewattached", "click", "viewArchEntAttachedFiles(entity_id)");

onEvent("tabgroup1/tab1/save", "delayclick", "saveEntity()");
onEvent("tabgroup1/tab1/clear", "click", "clearEntity()");
onEvent("tabgroup1/tab2/load", "click", "loadEntity()");
onEvent("tabgroup1/tab1/delete", "click", "deleteEntity()");

initEntity() {
	clearEntity();
}

String rel_id = null;

saveRel() {
	updateRel();
}

loadRel() {
	rel_id = getFieldValue("tabgroup2/tab2/relationships");
	
	if (isNull(rel_id)) return;
	
	showTab("tabgroup2/tab1", rel_id);
	
	rel = fetchRel(rel_id);
	
	if (rel.isForked()) {
		showToast("Relationship contains conflicts");
	}
}

updateRel() {
	if (isNull(rel_id)) rel_id = null;
	
	type = getFieldValue("tabgroup2/tab1/type");

	ArrayList locations = new ArrayList();
	List attributes = createAttributeList();
	if (rel_id == null) {
		attributes.add(createRelationshipAttribute("relationship", type + " " + relCount++, null, null));
	}else{
		rel = fetchRel(rel_id);
		relAttributes = rel.getAttributes();
		for(RelationshipAttribute attr : relAttributes){
			if ("location".equals(attr.getName())) {
				locations.add(attr);
			}
		}
	}
	
	attributes.add(createRelationshipAttribute("name", getFieldValue("tabgroup2/tab1/name"), null, getFieldCertainty("tabgroup2/tab1/name")));
	Object values = getFieldValue("tabgroup2/tab1/location");
	
	// delete locations that no longer exist
	for (Object loc : locations) {
		boolean hasLoc = false;
		for (Object value : values) {
			if (value.getName().equals(loc.getVocab())) {
				hasLoc = true;
			}
		}
		if (!hasLoc) {
			attributes.add(createRelationshipAttribute("location", loc.getText(), loc.getVocab(), loc.getCertainty(), true));
		}
	}
	
	for (Object value : values) {
		attributes.add(createRelationshipAttribute("location", getFieldAnnotation("tabgroup2/tab1/location"), value.getName(), getFieldCertainty("tabgroup2/tab1/location")));
	}
	
	rel_id = saveRel(rel_id, type, null, attributes);
	
	showToast("Finish saving record.");
	
	updateAll();
}

clearRel() {
	rel_id = null;
	
	newTab("tabgroup2/tab1");
	
	populateCheckBoxGroup("tabgroup2/tab1/location", locations);
}

updateAll() {
	Object entities = fetchEntityList("small");
	Object abovebelow = fetchRelationshipList("abovebelow");
	Object nextto = fetchRelationshipList("nextto");
	Object relationships = new ArrayList();
	if (abovebelow != null) relationships.addAll(abovebelow);
	if (nextto != null) relationships.addAll(nextto);
	
	Object values = getFieldValue("tabgroup1/tab1/location");
	Object locations = fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = 'location';");
	Object usersList = fetchAll("select userid, fname ||' ' || lname from user");
	populateDropDown("tabgroup1/tab2/entities", entities);
	populateDropDown("tabgroup2/tab2/relationships", relationships);
	populateCheckBoxGroup("tabgroup1/tab1/location", locations);
	populateList("user/tab1/users", usersList);
	setFieldValue("tabgroup1/tab1/location",values);
	
	populateDropDown("tabgroup4/tab1/entities", entities);
	populateDropDown("tabgroup4/tab1/relationships", relationships);
}

onEvent("tabgroup2/tab1/save", "delayclick", "saveRel()");
onEvent("tabgroup2/tab1/clear", "click", "clearRel()");
onEvent("tabgroup2/tab2/load", "click", "loadRel()");
onEvent("tabgroup2/tab1/delete", "click", "deleteRel()");

deleteRel(){
	if (rel_id == null || "".equals(rel_id)) return;
	deleteRel(rel_id);
	rel_id = null;
    cancelTabGroup("tabgroup2", false);
}

initRel() {
	clearRel();
}

int entityCount;
int relCount;

init() {
    updateAll();
	startSync();
	entityCount = Integer.valueOf(fetchOne("select count(distinct(uuid)) from archentity;").get(0)) + 1;
	relCount = Integer.valueOf(fetchOne("select count(distinct(relationshipid)) from relationship;").get(0)) + 1;
}

cleanup() {
	stopSync();
}

onEvent("menu", "show", "init()"); 
onEvent("user", "show", "cleanup()");	
onEvent("tabgroup1", "show", "initEntity()");	
onEvent("tabgroup2", "show", "initRel()");	

onEvent("tabgroup3/tab1/start", "click", "setFileSyncEnabled(true)");
onEvent("tabgroup3/tab1/stop", "click", "setFileSyncEnabled(false)");

setFieldValue("tabgroup1/tab1/sync", "0");

onEvent("tabgroup4/tab1/add", "click", "onAddMember()");

onAddMember() {
	eid = getFieldValue("tabgroup4/tab1/entities");
	rid = getFieldValue("tabgroup4/tab1/relationships");
	if (eid == null || "".equals(eid) || rid == null || "".equals(rid)) return;
	
	verb = getFieldValue("tabgroup4/tab1/verb");
	
	addReln(eid, rid, verb);
	
	showToast("Added relationship member");
}
