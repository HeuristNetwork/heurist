Heurist Code Documentation Conventions
Updated: 29 March 2010

OVERVIEW

Heurist code is hierarchichally structured. RTF documentation files are placed in every main directory to explain the functions of the files in that directory.


DIRECTORY NAMING CONVENTIONS

Directories are organised hierachichally by function.

The aim is that each directory represents a distinct function.

No directory should contain more than a dozen files unless there is a repetitive structure (eg. a set of templates for a long list of record types or a collection of images) or it is a collection of commonly referenced functions such as core php and js functions (in which case the file names must carry adequate information)..

Directory names will be short (since they contribute to the length of URLs) but informative.

As far as possible directory names should be a single lowercase word or concatenated word, but where required for clarity an underscore may be used as a word separator. We will not use CamelCase or lowerCamelCase for directory names.

Core functions shared by many different branches, including php, javascript, media items and templates are located in /core


FILE NAMING CONVENTIONS

Similar to directory names. Directory locations should provide context for file names, so we might have /admin/rectypes/add.php rather than needing to call the file something like add_rectype_definitions.php.


VARIABLE NAMING CONVENTIONS



CODE COMMENTING

Since ACL projects are a combination of PHP, HTML, XSLT, JS and CSS file types, we have selected a JavaDoc/PHPDoc commenting style using a common tag subset and tag format that will be accepted from both tools.

/**
*  getimage
*
*  Returns an Image object that can then be painted on the screen.
*  The url argument must specify an absolute {@link URL}. The name
*  argument is a specifier that is relative to the url argument.
*  <p>
*  This method always returns immediately, whether or not the
*  image exists. When this applet attempts to draw the image on
*  the screen, the data will be loaded. The graphics primitives
*  that draw the image will incrementally paint on the screen.
*
*  @param url an absolute URL giving the base location of the image
*  @param name the location of the image, relative to the url argument
*  @return the image at the specified URL
*  @see Image
*
*/

public Image getImage(URL url, String name) {
try {
return getImage(new URL(url, name));
} catch (MalformedURLException e) {
return null;
}
}

The basic format starts with /**  and newline with every line started by a * and the comment ends with a */.  Comments will be used to document the file, functions, structures, classes and complex pieces of code (regEpx, queries, algorithms, etc).  The basic structure of the comments will follow the form of:

/**
* [name of file or function]
* [ short description terminated by period and as 1st paragraph]
*
* [ multi-line possibly multi-paragraph detailed overview of the document section]
*
* [tag area for tags relavent to the documented section]
http://java.sun.com/j2se/javadoc/writingdoccomments/index.html - @param*/

Below are the listed formats for the various section of the code:

file comment
/**
* @fileOverview filename.ext  followed by short description of the contents of the file.
*
* A more detailed description of the contents (multi-line possibly multi-paragraph) and perhaps how it fits into the heurist model.
*
* @copyright  Copyright (c) 2005 - 2010, University of Sydney {@link  url to copyright html page}
*
* several tags should be used if they apply.
* @package packagename  - used if multiple files need to be functionally grouped
* @category categoryname - used to logically organize packages and files together in the generated help system
* @requires  any included file on which this file depends
* @see  name of item to see also (file, function or structure)
*/

function comment
/**
* simple description of the function
*
* detailed description if needed, possibly of the algorithm
*
* @param  {type|type2}  paramName  description of parameter
*
* @return  {type}  description of the return value
*
* @throws {type or class}
*/

structure comment

namespace comment

class comment

general code comment

inline code comment
 // use double slash placing the comment at the end of short code lines or on line(s) preceding the code for long code lines
 // comment all regular expressions and complex algorithms.
 // explain what blocks of code are doing even if it may seem obvious to you so that someone coming to the code cold can understand its purpose (not jsut what it is doing)



