/**
* manageEntity.js - BASE widget
*
* @package     Heurist academic knowledge management system
* @link        http://HeuristNetwork.org
* @copyright   (C) 2005-2016 University of Sydney
* @author      Artem Osmakov   <artem.osmakov@sydney.edu.au>
* @license     http://www.gnu.org/licenses/gpl-3.0.txt GNU License 3.0
* @version     4.0
*/

/*  
* Licensed under the GNU License, Version 3.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://www.gnu.org/licenses/gpl-3.0.txt
* Unless required by applicable law or agreed to in writing, software distributed under the License is
* distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
* See the License for the specific language governing permissions and limitations under the License.
*/

//
// METHODS
//        
//_initControls - add panels and init ui elements
//_onActionListener - central listener for action events
//_defineActionButton
//_rendererActionButton  - renderer of item for resultlist
//_recordListHeaderRenderer  - renderer of header for resultlist
//_recordListItemRenderer    - renderer of item for resultlist
//_recordListGetFullData     - callback function to retrieve full record info (in case we use 2 steps search: ids then list per page)  
// _getEditDialog
//_getEditDialogButtons  - return set of buttons fot edit popup
//_initDialog - init dialog widget 
// popupDialog
// closeDialog

//_selectAndClose - event handler for select-and-close (select_multi) or for any selection event for select_single
// selectedRecords get and set selected records 
    
//updateRecordList - listener of onresult event generated by searchEtity
//filterRecordList - listener of onfilter event generated by searchEtity. appicable for use_cache only       
//getRecordSet - get subset of current recordset by Ids
    

// EDIT 
// _getValidatedValues - returns values from edit form
// _afterSaveEventHandler
// _saveEditAndClose - send update request and close popup edit dialog

// _afterInitEditForm perform required after edit form init modifications (show/hide fields, assign even listener )
// addEditRecord - call _initEditForm_step1 and popup edit dialog

// _afterDeleteEvenHandler
//  _deleteAndClose

$.widget( "heurist.manageEntity", {

    // default options
    options: {
    
        //DIALOG section       
        isdialog: false,     // show as dialog @see  _initDialog(), popupDialog(), closeDialog
        height: 400,
        width:  760,
        modal:  true,
        title:  '',
        
        //LIST section 
        pagesize: 200,      // page size in resultList 
        list_header: false, // show header in list mode (@todo implement)
        list_mode:'default', // use standard resultList widget (for example in defTerms we use treeview)
        
        //SEARCH/filter section
        use_cache: false,   // search performed once and then we apply local filter  @see updateRecordList, filterRecordList
        //initial search/filter values by title and subset of groups to search
        filter_title: null,
        filter_group_selected:null,
        filter_groups: null,

        in_popup_dialog: false, //rare case when it is opened in popup iframe
        coverall_on_save: false,
        
        //EDIT section
        // none - edit from and buttons are hiiden
        // popup - edit form is opened in as popup
        // inline - edit form next to list on the same screen
        // only  - list is hidden onle edit form is visible
        //  NOTE if select_mode is not manager edit mode is changed to popup forcefully
        edit_mode: 'popup', // none, popup, inline, editonly 
        edit_height:null,
        edit_width :null,
        edit_title :null,
        edit_need_load_fullrecord: false, //if for edit form we need to load full(all data) record
        
        layout_mode:'short', //short wide  or valid html snippet
    
        // manager - all selection ui (buttons, checkboxes, label with number of sel.records) is hidden
        //        highlight in list works as usual and selected records are used in actions
        // select_single - in list only one item can be highlighted, in dialog mode it will be closed
        // select_multi - several items can be highlighted, chekboxes are visible in list, onselect works only if button prerssed
        select_mode: 'manager', //'select_single','select_multi','manager'

        selectbutton_label: 'Select',  //label for select button @todo remove?? 
        
        select_return_mode: 'ids', //ids or recordset
        
        selectOnSave:false, //edit/save of record triggers onselect and close dialog
        
        //it either loaded from server side if _entityName defined or defined explicitely on client side
        entity: {},       //configuration
        
        //listeners
        onInitFinished:null,  //event listener when dialog is fully inited - use to perform initial search with specific parameters
        beforeClose:null,
        onClose:null
    },
    
    //system name of entity  - define it to load entity config from server
    _entityName: '', 
    
    //selected records hRecordSet
    _selection:null,
    //cached records hRecordSet
    _cachedRecordset:null,
    //reference to edit form
    _editing:null,

    _currentEditID:null,
    _currentEditRecordset:null,
    
    _as_dialog:null, //reference to itself as dialog (see options.isdialog)
    _edit_dialog:null, //keep reference to popup dialog
    _toolbar:null,
    
    // the widget's constructor
    _create: function() {
        // prevent double click to select text
        //it prevents inputs in FF this.element.disableSelection();
    }, //end _create
    
    //
    //  load configuration and call _initControls
    //
    _init: function() {

            
        if(this.options.isdialog){  //show this widget as popup dialog
            this._initDialog();
        }
        
        //init layout
        var layout = '';
        if(this.options.layout_mode=='basic'){  //coomon tooolbar on top, list on left, edit form on right side
            layout = 
                '<div class="ent_wrapper">'
                    +'<div class="ent_header editForm-toolbar"/>'
                    +'<div class="ent_content_full" style="width:250px">'
                        +    '<div class="ent_header searchForm"/>'     
                        +    '<div class="ent_content_full recordList"/>'
                    +'</div>'
                    +'<div class="ent_content_full editForm" style="left:251px"/>'
                +'</div>';
        
        }else if(this.options.layout_mode=='short'){ //the same as above, short toolbar above edit on right side
        
            layout = 
                '<div class="ent_wrapper">'
                        +'<div class="ent_wrapper" style="width:320px">'
                        +    '<div class="ent_header searchForm"/>'     
                        +    '<div class="ent_content_full recordList"/>'
                        +'</div>'
                        +'<div class="ent_wrapper" style="left:321px">'
                        +    '<div class="ent_header editForm-toolbar"/>'
                        +    '<div class="ent_content_full editForm"/>'
                        +'</div>'
                +'</div>';

        }else if(this.options.layout_mode=='tabbed'){ //for terms
        
            layout = 
                '<div class="ent_wrapper">'
                        +'<div class="ent_wrapper">'
                        +    '<div class="ent_header searchForm"/>'     
                        +    '<div class="ent_content_full" style="top:4.4em">'
                                +'<div class="ent_content_full recordList" style="width:320px"/>' //treeview
                                +'<div class="ent_wrapper" style="top:4em;left:321px">'
                                +    '<div class="ent_header editForm-toolbar"/>'
                                +    '<div class="ent_content_full editForm"/>'
                                +'</div>'
                                +'<div class="ent_content_full recordList2" style="display:none;left:321px"/>' //image list
                        +'</div>'
                +'</div>';
                
        }else if(this.options.layout_mode=='editonly'){

            layout = 
                '<div class="ent_wrapper">'
                        + '<div class="recordList" style="display:none;"/>'
                        + '<div class="ent_content_full editForm" style="top:0"/>'
                +'</div>';
        
        }else{ //custom layout - must contain valid html snippet
            layout = this.options.layout_mode;
        }
        try{
            $(layout).appendTo(this.element);
        }catch(e){
            this.element.html('Cannot init layout. Please contact developers')
            return;
        }
        
        //find 3 elements searchForm, recordList+recordList_toolbar, editForm+editForm_toolbar
        this.recordList = this.element.find('.recordList');
        //this.recordListToolbar = this.element.find('.recordList');
        this.searchForm      = this.element.find('.searchForm');
        this.editForm        = this.element.find('.editForm');
        this.editFormToolbar = this.element.find('.editForm-toolbar');

        //specific for records        
        this.editFormSummary = this.element.find('.editFormSummary');
        this.editFormPopup = this.element.find('.editFormDialog');
        
        //this.element.addClass('ui-heurist-bg-light');
        
        if(this.options.select_mode!='manager'){ //for select mode we allow only popup edit
            if(this.options.edit_mode!='none'){ 
                this.options.edit_mode='popup'; 
            };
        }

        if(this.options.edit_mode=='inline'){
            smsg = 'Select an entity in the list to edit';
        }else{
            smsg = 'loading...';
        }
        this.editForm.html('<div class="center-message">'+window.hWin.HR(smsg)+'</div>');
        
        if(this.options.layout_mode=='short' || this.options.layout_mode=='basic'){
        
            //for select and select mode - editor is always popup    
            if(this.options.edit_mode=='none' || this.options.edit_mode=='popup'){ //hide edit form
                this.recordList.parent().css('width','100%');
                //hide edit form 
                if(this.options.layout_mode=='short') this.editForm.parent().hide();
                else if(this.options.layout_mode=='basic') this.editForm.hide();
                
            }else if(this.options.edit_mode=='editonly'){  //hide list
                this.recordList.parent().hide();
                if(this.options.layout_mode=='short') this.editForm.parent().css('left',0);
                else if(this.options.layout_mode=='basic') this.editForm.css('left',0);
            }
        
        }
        
        var that = this;
        if(!window.hWin.HEURIST4.util.isempty(this._entityName)){
            //entity should be loaded from server
            window.hWin.HAPI4.EntityMgr.getEntityConfig(this._entityName, 
                    function(entity){
                        that.options.entity = entity;
                        if(that._initControls()){
                            if($.isFunction(that.options.onInitFinished)){
                                that.options.onInitFinished.call(that);
                            }        
                        }
                    });
            return;
        }else{
            //entity already defined or set via options
            this._entityName = this.options.entity['entityName'];
            if(that._initControls()){
                if($.isFunction(that.options.onInitFinished)){
                    that.options.onInitFinished.call( that );
                }        
            }
        }
    },
      
    //  
    // invoked from _init after loading of entity configuration    
    // in base widget: init resultList, adds search and edit panels
    // in descendat: init ui listeners and init searchEntity
    //
    _initControls:function(){
        
        if(!this._entityName || $.isEmptyObject(this.options.entity)){
            return false;
        }
        
        var that = this;
        
        if(this.options.list_mode=='default'){

        
                //init record list
                this.recordList
                    .resultList({
                       eventbased: false, 
                       isapplication: false, //do not listent global events @todo merge with eventbased
                       multiselect: (this.options.select_mode!='select_single'), //@todo replace to select_mode

                       select_mode: this.options.select_mode,
                       selectbutton_label: this.options.selectbutton_label,
                       
                       entityName: this._entityName,
                       //view_mode: this.options.view_mode?this.options.view_mode:null,
                       
                       pagesize:(this.options.pagesize>0) ?this.options.pagesize: 9999999999999,
                       empty_remark: 
                            (this.options.select_mode!='manager' || this.options.entityName!='records')
                            ?'<div style="padding:1em 0 1em 0">'+this.options.entity.empty_remark+'</div>'
                            :'',
                       searchfull: function(arr_ids, pageno, callback){
                           that._recordListGetFullData(arr_ids, pageno, callback);
                       },//this._recordListGetFullData,    //search function 
                       renderer: function(recordset, record){ 
                                return that._recordListItemRenderer(recordset, record);  //custom render for particular entity type
                            },
                       rendererHeader: this.options.list_header ?function(){
                                return that._recordListHeaderRenderer();  //custom header for list mode (table header)
                                }:null
                               
                                });     

                this._on( this.recordList, {
                        "resultlistonselect": function(event, selected_recs){
                                    this.selectedRecords(selected_recs);
                                    
                                    if (this.options.edit_mode=='inline'){
                                            this._onActionListener(event, {action:'edit'}); //default action of selection
                                    }
                                },
                        "resultlistonaction": this._onActionListener        
                        });
                        
        }        
        
       //---------    EDITOR PANEL
       //if actions allowed - add div for edit form exists - it may be shown as right-hand panel or in modal popup
       if(this.options.edit_mode!='none'){
            if(this.options.edit_mode=='inline'){
/* @todo align toolbar in list and editor for wide layout mode
               if(this.recordList){
                   this.recordList.css('width','250px');
                   var list_container = this.recordList.find('.div-result-list-content');
                   
                   this.ent_editor_wrapper.css({'left':'250px'})
                   //align with recordList header
                   this.editForm.css({'border-top':'1px solid #cccccc',
                                        top:list_container.css('top')});

               }
               this.ent_editor_wrapper.show();
*/               
            }else{
               //this.ent_editor_wrapper.addClass('ui-heurist-bg-light').css({'overflow':'hidden'}).hide(); 
            }
       }

        //--------------------------------------------------------------------    

        //var ishelp_on = window.hWin.HAPI4.get_prefs('help_on')==1;
        //$('.heurist-helper1').css('display',ishelp_on?'block':'none');

        
        if(this.options.isdialog){
            this.popupDialog();
        }
        
        
        window.hWin.HEURIST4.ui.applyCompetencyLevel(-1, this.element); 
        
        return true;
        //place this code in extension ===========    
        /* init search header
        this.searchForm.searchSysGroups(this.options);
            
        this._on( this.searchForm, {
                "searchsysgroupsonresult": this.updateRecordList
                });
       */         
        //extend ===========    
    },

    //Called whenever the option() method is called
    //Overriding this is useful if you can defer processor-intensive changes for multiple option change
    _setOptions: function( ) {
        this._superApply( arguments );
    },

    /* 
    * private function 
    * show/hide buttons depends on current login status
    */
    _refresh: function(){

    },
    // 
    // custom, widget-specific, cleanup.
    _destroy: function() {
        // remove generated elements
        if(this.searchForm) this.searchForm.remove();
        if(this.recordList) this.recordList.remove();
        if(this.editForm) this.editForm.remove();

        this.wrapper.remove();
        this._selection = null;
    },
    
    //----------------------
    //
    // listener of action button/menu clicks - central listener for action events
    //
    _onActionListener:function(event, action){
        if(action=='select-and-close'){
             this._selectAndClose();
             return true;
        } else {
             var recID = 0;
             if(action && action.action){
                 recID =  action.recID;
                 action = action.action;
             }
             if(action=='add'){
                    this.addEditRecord(-1);
                    return true;
             }else if(action=='delete'){
                    this._currentEditID = recID;
                    this._deleteAndClose(); 
             }
            
             var s = 'User clicked action "'+action+'" for ';
             if(recID>0){
                 s = s + 'rec# '+recID;
                 
              //take records ID from selection   
             }else if(window.hWin.HEURIST4.util.isRecordSet(this._selection) && this._selection.length()>0){
                 s = s + this._selection.length() + ' selected record';
                 var recs = this._selection.getOrder();
                 recID = recs[recs.length-1];
             }else{
                 s = 'Nothing selected';
                 recID = null;
             }
             
             if(action=='edit'){
                    this.addEditRecord(recID);
                    return true;
             }else if(action=='save'){
                    this._saveEditAndClose();
                    return true;
             }else if(action=='cancel'){
                    this._initEditForm_step3(this._currentEditID)
                    return true;
             }else{
                    //window.hWin.HEURIST4.msg.showMsgFlash(s);  
             }
        }
        return false;
    },
    
    //----------------------
    //
    // helper function that creates button for given action
    //
    // action = {key, label, title, icon}
    // mode - full|small|icon|icon_text - full is default mode
    _defineActionButton: function(action, container, mode, style){        
        
        if(!style) style = {};
        if(!action.icon) action.icon = '';
        action.title = (!action.title)?'':window.hWin.HR(action.title);

        if(mode=='icon_text'){ //for resultList item - buttons will be inited after render complete

            var res = '<div title="'+(action.title?action.title:action.label)
            +'" class="logged-in-only" role="button" aria-disabled="false" data-key="'+action.key+'">';

                    if(action.icon){
                        res = res + '<span class="ui-icon '+action.icon+'"></span>';    
                    }else{
                        res = res + window.hWin.HR(action.label);
                    }
            res = res + '</div>';
            
            return res;
        }else {
            if(!container) return;
            var btn;
            
            if(mode=='icon'){
                
                    //class="item inlist logged-in-only" '
                    btn = $('<div>',{title:action.title, 'aria-disabled':false, 'data-key':action.key})
                            .css(style)
                            .appendTo(container);
                    if(action.icon){
                        btn.html('(<span class="ui-icon '+action.icon+'"></span>');    
                    }else{
                        btn.html(window.hWin.HR(action.label));
                    }
                
            }else{
                
                    btn = $('<div>',{'data-key':action.key}).button(
                            {icons: {primary: action.icon}, 
                             text: (mode!='small'), 
                             title: action.title, 
                             label: window.hWin.HR(action.label) })
                    .css(style)         
                    .appendTo(container);
                    
                    if(mode=='small'){
                        btn.css('width','16px');
                    }
                    
            }        
            this._on(btn, {'click':function( event ) {
                        var ele = $(event.target);
                        var key = ele.attr('data-key') || ele.parent().attr('data-key');
                        this._onActionListener(null, key);
                        //that._trigger( "onaction", null, key );
                    }});
                    
            return btn;
        }
        
    },
    
    _defineActionButton2: function(options, container){        
        
        var btn_opts = {label:options.text, icons:options.icons};
        
        var btn = $('<div>').button(btn_opts)
                    .click(options.click)
                    .appendTo(container);
        if(options.id){
            btn.attr('id', options.id);
        }
        if(options.css){
            btn.css(options.css);
        }
    },
    
    // @todo  to remove
    _rendererActionButton: function(action, isheader){        
        if(window.hWin.HEURIST4.util.isArrayNotEmpty(this.options.action_select)){        
        //if(this.options.select_mode=='manager'){
            var idx = 0;
            for(idx in this.options.action_select){
                var act = this.options.action_select[idx];
                if(action == act.key)
                {
                    if(isheader==true){

                        return '<div title="' + (act.hint?act.hint:'')
                            +'" style="display:inline-block;border-right:1px solid;width:3em">'
                            +act.title+'</div>';
                        
                    }else{
                        
                        var icon = act.icon;
                        if(window.hWin.HEURIST4.util.isempty(act.icon)){
                            //by default only edit,delete buttons allowed - otherwise need specify icon 
                            //on entity configuration file
                            if(action=='edit'){
                                icon = 'ui-icon-pencil';
                            }else if(action=='delete'){
                                icon = 'ui-icon-circle-close';
                            }else{
                                return ''; 
                            }
                        }
                    
                        return '<div title="'
                            + (act.hint?act.hint:act.title)
                            +'" class="item inlist logged-in-only" '
                            +'style="width:3em" role="button" aria-disabled="false" data-key="'+act.key+'">'
                            +'<span class="ui-icon '+icon+'"></span>'
                            + '</div>';
                    }
                }
            }               
        }
        
        return '';
        
    },
        
    //
    // custom renderer for resultList header
    //
    _recordListHeaderRenderer:function(){
        //TO EXTEND        
        return '';
    },
    
    //
    // renderer of item for resultlist
    //
    _recordListItemRenderer:function(recordset, record){
        //TO EXTEND        
        return 'implement _recordListItemRenderer';
    },

    //
    // callback function to retrieve full record info (incase we use 2 steps search: ids then list per page)  
    //
    _recordListGetFullData:function(arr_ids, pageno, callback){

        var request = {
                'a'          : 'search',
                'entity'     : this.options.entity.entityName,
                'details'    : 'list',
                'pageno'    : pageno
        };
        
        request[this.options.entity.keyField] = arr_ids;
        
        //request[this.options.entity] = arr_ids;
        
        window.hWin.HAPI4.EntityMgr.doRequest(request, callback);
    },
    
    
    _getEditDialog: function(){
            if(this.options.edit_mode=='popup' && this._edit_dialog){
                return this._edit_dialog.parents('.ui-dialog'); 
            }else if(this.options.edit_mode=='editonly'){

                if(this._as_dialog){
                    return this._as_dialog.parents('.ui-dialog'); 
                }else {
                    return $(document).find('div.ui-widget')[0];
                }
            }
            return null;
    },
    
    _getEditDialogButtons: function(){

        var that = this;        
        return [
                 {text:window.hWin.HR((this.options.edit_mode=='popup')?'Close':'Cancel'), 
                    id:'btnRecCancel',
                    css:{'float':'right'}, 
                    click: function() { 
                        if(that.options.edit_mode=='popup') {
                            that.editFormPopup.dialog('close'); 
                        }else if(that.options.edit_mode=='editonly') {
                            that.closeDialog();
                        }else{                                    
                            that._initEditForm_step3(that._currentEditID); //reload
                        }
                    }},
                 {text:window.hWin.HR('Save'),
                    id:'btnRecSave',
                    css:{'visibility':'hidden', 'float':'right'},  
                    click: function() { that._saveEditAndClose(); }},
                    
                 {text:window.hWin.HR('Remove'), 
                    id:'btnRecRemove',
                    css:{'float':'left'},
                    click: function() { that._deleteAndClose(); },
                 }];
    },

    //
    // init dialog widget 
    //
    _initDialog: function(){
        
            var options = this.options,
                btn_array = [], 
                position = null,
                    that = this;
        
            //dialog buttons SELECT and CLOSE
            if(options['select_mode']=='select_multi' || options['select_mode']=='select_roles'){ 
                btn_array.push({text:window.hWin.HR( options['selectbutton_label'] ),
                        click: function() { that._selectAndClose(); }}); 
            }

            if(options.edit_mode == 'editonly'){
                btn_array =  this._getEditDialogButtons();
                if(!options.beforeClose){
                    options.beforeClose = function(){
                        //show warning in case of modification
                        if(that._editing && that._editing.isModified() && that._currentEditID!=null){
                            var $dlg, buttons = {};
                            buttons['Save'] = function(){ that._saveEditAndClose(null, 'close'); $dlg.dialog('close'); }; 
                            buttons['Ignore and close'] = function(){ that._currentEditID=null; that.closeDialog(); $dlg.dialog('close'); };
                            
                            $dlg = window.hWin.HEURIST4.msg.showMsgDlg(
                                    'You have made changes to the data. Click "Save" otherwise all changes will be lost.',
                                    buttons,
                                    {title:'Confirm',yes:'Save',no:'Ignore and close'});
                            return false;   
                        }
                        that.saveUiPreferences();
                        return true;
                    };
                }
                
                position = this._getDialogPosition();                
                
            }else {
                //if(options.in_popup_dialog===false){ 
                btn_array.push({text:window.hWin.HR('Close'), 
                        click: function() { that.closeDialog(); }}); //use usual close dialog 
            }
            
            if(position==null) position = { my: "center", at: "center", of: window };
            var maxw = (window.hWin?window.hWin.innerWidth:window.innerWidth);
            if(options['width']>maxw) options['width'] = maxw*0.95;
            var maxh = (window.hWin?window.hWin.innerHeight:window.innerHeight);
            if(options['height']>maxh) options['height'] = maxh*0.95;
            
            //this.options.window = window.hWin;
            
            var $dlg = this.element.dialog({
                autoOpen: false ,
                //element: this.element[0],
                height: options['height'],
                width:  options['width'],
                modal:  (options['modal']!==false),
                title: window.hWin.HEURIST4.util.isempty(options['title'])?'':options['title'], //title will be set in  initControls as soon as entity config is loaded
                position: position,
                beforeClose: options.beforeClose,
                resizeStop: function( event, ui ) {//fix bug
                    that.element.css({overflow: 'none !important','width':that.element.parent().width()-24 });
                },
                close:function(){
                    if($.isFunction(that.options.onClose)){
                      //that.options.onClose(that._currentEditRecordset);  
                      that.options.onClose.call();
                    } 
                    $dlg.parent().remove();    
                        
                },
                buttons: btn_array
            }); 
            this._as_dialog = $dlg; 
            
            if(options.edit_mode == 'editonly'){
                this._toolbar = this._as_dialog.parent();
                //assign unique identificator to get proper position of child edit dialogs
                this._toolbar.attr('posid','edit'+this._entityName+'-'+(new Date()).getTime());
            }
                
            
    },
    
    //
    // show itself as popup dialog
    //
    popupDialog: function(){
        if(this.options.isdialog){

            //was this.element.dialog("open");
            
            //init hint and help buttons on dialog titlebar
             
            //construct entity from config
            if(window.hWin.HEURIST4.util.isempty(this.options.title)){
                    var title = window.hWin.HR(this.options['select_mode']=='manager'?'Manage':'Select') + ' ' +
                        ((this.options['select_mode']!='select_single'
                                    ?this.options.entity.entityTitlePlural
                                    :this.options.entity.entityTitle));
                    
                    this._as_dialog.dialog('option', 'title', title);                                     
            }
            
            this._as_dialog.dialog("open");
            
            if(this.options.entity.entityName=='records'){ //special case for help
                this._as_dialog.addClass('manageRecords');
            }
            
            window.hWin.HEURIST4.ui.initDialogHintButtons(this._as_dialog,
                null, //'prefs_'+this._entityName,
                window.hWin.HAPI4.baseURL+'context_help/'+this.options.entity.helpContent+' #content', false);
            
        }
    },
    
    //
    // close dialog
    //
    closeDialog: function(is_force){
        if(this.options.isdialog){
            
            if(is_force===true){
                this._as_dialog.dialog('option','beforeClose',null);
            }
            
            this._as_dialog.dialog("close");
            //this.element.dialog('close');
        }
    },
    
    //
    //
    //
    _getDialogPosition: function(){
        
            var position = null;
            var tm = 0;

            //detect position
            $('div.ui-dialog[posid^="edit'+this._entityName+'"]')
            //get the latest
            .each(function(i, dlg){
                tm = Math.max(tm, $(dlg).attr('posid').split('-')[1]);
            });
            var dlg = $('div.ui-dialog[posid="edit'+this._entityName+'-'+tm+'"]');
            
            if(dlg.length>0){
                
                /* it does not work properly
                var offset = $(dlg).offset();
                var stop = offset.top+h> $(document).height()?'0':offset.top+20; 
                var sleft = offset.left+w> $(document).width()?'0':offset.left+20; 
                position = { my: "left top", at: sleft+' '+stop, within:window};
                */
                position = { my: "left top", at:'left+20 top+60', of:dlg};
            }else{
                
                var prefs = this.getUiPreferences();
                if(prefs && prefs.top>=0 && prefs.left>=0){
                    position = { my: "left top", at:'left+'+prefs.left+' top+'+prefs.top}; //relative to window    
                }
            }
            
            
            return position;
    },
    
    
    getUiPreferences:function(){
        return null;
    },
    
    saveUiPreferences:function(){
        
    },

    //
    // event handler for select-and-close (select_multi)
    // or for any selection event for select_single
    // triger onselect event
    //
    _selectAndClose: function(){
        
        if(this.options.isdialog && this.options.edit_mode!='editonly'){
            window.hWin.HAPI4.save_pref('select_dialog_'+this._entityName, 
                            {width: this._as_dialog.dialog('option', 'width'), 
                             height: this._as_dialog.dialog('option', 'height')});
        }
        
        var res = this.selectedRecords();
        
        if(window.hWin.HEURIST4.util.isRecordSet(res)){
            //window.hWin.HAPI4.save_pref('recent_Users', this._selection.getIds(25), 25);      
            this._trigger( "onselect", null, 
                {selection:  
                    (this.options.select_return_mode=='recordset') ?res :res.getIds()});
        }else{        
            this._trigger( "onselect", null, null );
        }
        this.closeDialog();
    },

    //
    // get and set selected records - RecordSet
    //    
    selectedRecords: function(value){
        
        if(window.hWin.HEURIST4.util.isnull(value)){
            //getter
            return this._selection;
        }else{
            
            if($.isArray(value)){
                if(this._cachedRecordset){
                    value = this._cachedRecordset.getSubSetByIds(value);
                }else{
                    value = null;
                }
            }
            //setter
            this._selection = value;
            
            if(this.options.select_mode=='select_single'){
                this._selectAndClose();
            }
        }
/*        
            if(this._editing.isModified()){
                window.hWin.HEURIST4.msg.showMsgDlg('Data were modified. Ignore and load data for selected record',
                function(){ that._initEditForm_step3(recID); },
                'Confirm');
*/        
        
    },
    
    //--------------- WORK WITH LIST
    //
    // listener of onresult event generated by searchEtity
    //
    updateRecordList: function( event, data ){
        if (data){
            if(this.options.use_cache){
                this._cachedRecordset = data.recordset;
            }else if(this.options.list_mode=='default'){
                this.recordList.resultList('updateResultSet', data.recordset, data.request);
            }
        }
    },

    //
    // listener of onfilter event generated by searchEtity. appicable for use_cache only       
    //
    filterRecordList: function(event, request){
        if(this.options.use_cache){
            var subset = this._cachedRecordset.getSubSetByRequest(request, this.options.entity.fields);
            if(this.options.list_mode=='default'){
                this.recordList.resultList('updateResultSet', subset, request);   
            }
        }
    },

    //
    // get subset of current recordset by Ids
    //
    getRecordSet: function(recIDs){
        if(this.options.use_cache){
            if(window.hWin.HEURIST4.util.isnull(recIDs)){
                return this._cachedRecordset;
            }else{
                return this._cachedRecordset.getSubSetByIds(recIDs);    
            }
        }else if(this.options.list_mode=='default'){
            if(window.hWin.HEURIST4.util.isnull(recIDs)){
                return this.recordList.resultList('getRecordSet')
            }else{
                return this.recordList.resultList('getRecordsById', recIDs);
            }
        }
    },

    //  -----------------------------------------------------
    //
    //  1. returns values from edit form
    // 2. performs special action for virtual and hidden fields 
    // fill them with constructed and/or predefined values
    // EXTEND this method to set values for hidden fields (for example parent term_id or group/domain)
    //
    _getValidatedValues: function(){
        
        if(this._editing.validate()){
            return this._editing.getValues(false);    
        }else{
            window.hWin.HEURIST4.msg.showMsgFlash('Missing or invalid data entered',1500);
            $(this.editForm.find('input.ui-state-error')[0]).focus();
            
            return null;
        }
    },
    

    //  -----------------------------------------------------
    //
    //  after save event handler
    //
    _afterSaveEventHandler: function( recID, fieldvalues ){
        
            
            window.hWin.HEURIST4.msg.showMsgFlash(this.options.entity.entityTitle+' '+window.hWin.HR('has been saved'));
            if(this.options.edit_mode=='popup'){
                this._currentEditID = null;
                this.editFormPopup.dialog('close');
            }else if(this.options.edit_mode=='inline'){
                    //reload
                    this._currentEditID = recID;
                    this._initEditForm_step3(this._currentEditID); //reload 
            }
            
            if(this.options.use_cache){
                //refresh item in list
                if(this.options.list_mode=='default'){
                    this.recordList.resultList('refreshPage');  
                }
            }
            
    },
    
    //  -----------------------------------------------------
    //
    //  send update request and close popup if edit is in dialog
    // adteraction is used in overriden version of this method
    //
    _saveEditAndClose: function( fields, afterAction ){

            if(!fields){
                fields = this._getValidatedValues(); 
            }
            
            if(fields==null) return; //validation failed
        
            var request = {
                'a'          : 'save',
                'entity'     : this.options.entity.entityName,
                'request_id' : window.hWin.HEURIST4.util.random(),
                'fields'     : fields                     
                };
             
                if(this.options.coverall_on_save) {
                    if(this.options.edit_mode=='popup' && this._edit_dialog){
                        window.hWin.HEURIST4.msg.bringCoverallToFront(this._edit_dialog.parents('.ui-dialog'));   
                    }
                }
                
                var that = this;                                                
                //that.loadanimation(true);
                window.hWin.HAPI4.EntityMgr.doRequest(request, 
                    function(response){
                        
                        window.hWin.HEURIST4.msg.sendCoverallToBack();
                        
                        if(response.status == window.hWin.HAPI4.ResponseStatus.OK){

                            var recID = response.data[0];
                            fields[ that.options.entity.keyField ] = (''+recID);
                            
                            //update record in cache
                            if(that.options.use_cache && that._cachedRecordset){
                                that._cachedRecordset.addRecord(recID, fields);
                            }else{
                                //add/update record in recordset in _afterSaveEventHandler depends on entity
                            }
                            
                            that._afterSaveEventHandler( recID, fields );
                            
                        }else{
                            window.hWin.HEURIST4.msg.showMsgErr(response);
                        }
                    });
    },       

    //  -----------------------------------------------------
    //
    //  after save event handler
    //
    _afterDeleteEvenHandler: function( recID ){
        
            this._currentEditID = null;
            window.hWin.HEURIST4.msg.showMsgFlash(this.options.entity.entityTitle+' '+window.hWin.HR('has been deleted'));
            if(this.options.edit_mode=='popup'){
                //hide popup edit form 
                if(this._edit_dialog){
                    try{
                        isOpenAready = this._edit_dialog.dialog('isOpen');
                        if(isOpenAready){
                            this._edit_dialog.dialog('close');
                        }
                    }catch(e){}
                }
            }else if(this.options.edit_mode=='editonly'){
                //close itself
                this.closeDialog();
                return;
            }
            
            if(this.options.list_mode=='default'){
                //refresh list
                var recset = this.recordList.resultList('getRecordSet');
                recset.removeRecord(recID);
                this.recordList.resultList('refreshPage');  
            }
            
            if(this.options.edit_mode=='inline'){
                //for inline - reload edit page with first item in list
                var new_recID = this._getField2(this.options.entity.keyField); 
                if(!(new_recID>0)) new_recID = null;
                this.addEditRecord(new_recID); //null - hide inline edit form 
            }
    },
    
    //  -----------------------------------------------------
    //
    //  delete entity and close popup if edit is dialog
    //
    _deleteAndClose: function(){
        
            if(this._currentEditID==null || this._currentEditID<1) return;

            var request = {
                'a'          : 'delete',
                'entity'     : this.options.entity.entityName,
                'request_id' : window.hWin.HEURIST4.util.random(),
                'recID'      : this._currentEditID                     
                };
                
                var that = this;                                                
                
                window.hWin.HAPI4.EntityMgr.doRequest(request, 
                    function(response){
                        if(response.status == window.hWin.HAPI4.ResponseStatus.OK){

                            var recID = that._currentEditID;
                            if(that.options.use_cache){
                                that._cachedRecordset.removeRecord( recID );
                            }
                            that._afterDeleteEvenHandler( recID );
                            
                        }else{
                            window.hWin.HEURIST4.msg.showMsgErr(response);
                        }
                    });
    },       
    
    //
    // to override
    //
    onEditFormChange: function( changed_element ){
        
        var force_hide = (changed_element===true);
        
        var mode = 'hidden';
        if(force_hide!==true){
            var isChanged = this._editing.isModified();
            mode = isChanged?'visible':'hidden';
        }
        //show/hide save,cancel,remove buttons
        var ele = this._toolbar;
        if(ele){
            if(this.options.edit_mode=='inline') { //for popup and editonly always visible
                    ele.find('#btnRecCancel').css('visibility', mode);
            }
            ele.find('#btnRecSave').css('visibility', mode);
            
            if(this._currentEditRecordset==null){            
                ele.find('#btnRecRemove').css('visibility', 'hidden');
            }else{
                ele.find('#btnRecRemove').css('visibility', 'visible');    
            }
        }
    },
    
    /*
    _initEditForm_step1  - it creates hEditing object and warns about save previous data
    _initEditForm_step2  - init buttons for toolbar for inline or open edit form in popup 
    _initEditForm_step3 -  search for full record data (if required)
    _initEditForm_step4 -  prepare record data and initEditForm and fill summary panel (for RECORDS only) for edit form 
    _afterInitEditForm
    */
    
    
    //  -----------------------------------------------------
    //
    //  it creates hEditing object and warns about save previous data
    //
    _initEditForm_step1: function(recID){
        
        if(!this.editForm || this.editForm.length==0) return;

        var that = this;
        
        if(!this._editing){
            this._editing = new hEditing({entity:this.options.entity, container:this.editForm, onchange:function(){
                that.onEditFormChange(this); //this is changed_element
            }}); //pass container
            this._initEditForm_step2(recID);
            
        }else{
            
            if(this._currentEditID!=null && this._editing.isModified()){
                window.hWin.HEURIST4.msg.showMsgDlg(
                    'Save changes and load another record?',
                    //'Data were modified in edit form. Ignore modifications and start edit the new data',
                        function(){ 
                            //save changes and go to next step
                            that._saveEditAndClose( null, function(){ that._initEditForm_step2(recID); } );
                            //that._initEditForm_step2(recID); 
                        },
                        {title:'Confirm',yes:'Save changes', no:'Cancel'});
            }else{
                this._initEditForm_step2(recID);            
            }
        }
    },
    
//define delete on right side
//this._defineActionButton({key:'delete',label:'Remove', title:'', icon:'ui-icon-minus'},
//this.editFormToolbar,'full',{float:'right'});
                
    
    //
    // open popup edit dialog if we need it
    //
    _initEditForm_step2: function(recID){
    
        if(!(recID==null || this.options.edit_mode=='none')){
        
        var isOpenAready = false;
        if(this.options.edit_mode=='popup'){
            if(this._edit_dialog){
                try{
                    isOpenAready = this._edit_dialog.dialog('isOpen');
                }catch(e){}
            }
        } else if(this.options.edit_mode=='inline') { //inline 
            isOpenAready = this._toolbar && !this._toolbar.is(':empty');
        }
        
        if(!isOpenAready){            
    
            var that = this; 
            this._currentEditID = recID;

            this.editFormPopup = this.editForm;
            
            if(this.options.edit_mode=='popup'){
                //hide header toolbar    
                this.editForm.css({'top': 0, overflow:'auto'});
                     
                this._edit_dialog = this.editFormPopup.dialog({
                        autoOpen: true,
                        height: this.options['edit_height']?this.options['edit_height']:400,
                        width:  this.options['edit_width']?this.options['edit_width']:740,
                        modal:  true,
                        title: this.options['edit_title']
                                    ?this.options['edit_title']
                                    :window.hWin.HR(recID<0?'Add':'Edit') + ' ' + this.options.entity.entityTitle,
                        resizeStop: function( event, ui ) {//fix bug
                            that.element.css({overflow: 'none !important','width':that.element.parent().width()-24 });
                        },
                        beforeClose: function(){
                            //show warning in case of modification
                            if(that._editing.isModified() && that._currentEditID!=null){
                                var $dlg, buttons = {};
                                buttons['Save'] = function(){ 
                                    that._saveEditAndClose(null, 'close'); 
                                    $dlg.dialog('close'); 
                                }; 
                                buttons['Ignore and close'] = function(){ 
                                        that._currentEditID = null; 
                                        //that.closeDialog(); 
                                        that._edit_dialog.dialog('close'); 
                                        $dlg.dialog('close'); 
                                };
                                
                                $dlg = window.hWin.HEURIST4.msg.showMsgDlg(
                                        'You have made changes to the data. Click "Save" otherwise all changes will be lost.',
                                        buttons,
                                        {title:'Confirm',yes:'Save',no:'Ignore and close'});
                                return false;   
                            }
                            that.saveUiPreferences();
                            return true;
                        },
                        
                        buttons: this._getEditDialogButtons()
                    });        
                    
                    //help and tips buttons on dialog header
                    window.hWin.HEURIST4.ui.initDialogHintButtons(this.editFormPopup,
                     null,  //  'prefs_'+this._entityName,
                     window.hWin.HAPI4.baseURL+'context_help/'+this.options.entity.helpContent+' #content', false);
                     
                this._toolbar = this._edit_dialog.parent();     
                     
            }else if(this.editFormToolbar.length>0){ //initialize action buttons
                
                this._toolbar = this.editFormToolbar;
                this.editFormToolbar.empty();
                var btns = this._getEditDialogButtons();
                for(var idx in btns){
                    this._defineActionButton2(btns[idx], this.editFormToolbar);
                }
                
            }
            
        }
        }
        this._initEditForm_step3(recID); 
    },        

    //
    // load full data record (if required)
    //
    _initEditForm_step3: function(recID){
        //fill with values
        this._currentEditID = recID;
        
        if(recID==null){
            this._editing.initEditForm(null, null); //clear and hide
        }else{

            if(recID!=null && recID!=-1){ //edit existing record
                if(this.options.edit_need_load_fullrecord){
                    
                    //get primary key field
                    if(!this.options.entity.keyField) return alert('Developer! Define fieldname for ID in entity configuration file!!!');
                    
                    var request = {'a': 'search',
                        'entity': this.options.entity.entityName,  //'defDetailTypes'
                        'details': 'full',
                        'request_id': window.hWin.HEURIST4.util.random()
                    }
                    request[this.options.entity.keyField] = recID;
                    
                    var that = this;                                                
                    
                    window.hWin.HAPI4.EntityMgr.doRequest(request, 
                        function(response){
                            if(response.status == window.hWin.HAPI4.ResponseStatus.OK){
                                var recordset = new hRecordSet(response.data);
                                that._initEditForm_step4(recordset);
                            }else{
                                window.hWin.HEURIST4.msg.showMsgErr(response);
                            }
                        });
                        
                    return;    
                
                }else{
                    var recordset = this.getRecordSet([recID]);
                    this._initEditForm_step4(recordset);
                }
            }else if(recID<0){
                // add new record
                this._initEditForm_step4(null);
            }
            
            
        
        }
        
        return;
    },
    
    //
    // finally initialize editing widget
    //
    _initEditForm_step4: function(recordset){
        this._currentEditRecordset = recordset; 
        
        //pass structure and record details
        this._editing.initEditForm(this.options.entity.fields, recordset);
        this._afterInitEditForm();
    },
    
    //
    // get field for currently editing record
    //
    _getField: function(fname){
        
        if(this._currentEditRecordset){
            var record = this._currentEditRecordset.getFirstRecord();
            var value  = this._currentEditRecordset.fld(record, fname);
            return value;
        }else{
            return '';
        }
    },
    
    //
    //
    //
    _getField2: function(fname, record){
        var value = '';
        var recset = this.recordList.resultList('getRecordSet');
        if(recset){
            if(!record){
                record = recset.getFirstRecord();
            }
            if(record){
                value = recset.fld(record, fname);    
            }
        }
        return value;
    },

    
    //-----
    // perform required after edit form init modifications (show/hide fields, assign event listener )
    // for example hide/show some fields based on value of field
    //
    _afterInitEditForm: function(){

        if(this.options.edit_mode=='inline'){ //make labels in edit form narrower
            //@todo reduce it in css                 
            this.editForm.find('.header').css({'min-width':'100px','width':'100px'});
/*            
            //add save button at the end of edit form
            this._defineActionButton({key:'save',label:'Save', title:'', icon:'ui-icon-check'},
                        this.editForm,'full',{display:'inline-block', margin:'0 4px 0 35%'});
            //add save button at the end of edit form
            this._defineActionButton({key:'cancel',label:'Cancel', title:'', icon:'ui-icon-cross'},
                       this.editForm,'full',{display:'inline-block', margin:'0 35% 0 0'});
*/                       
        }
        
        this.onEditFormChange();
        // to EXTEND         
        
        //old way window.hWin.HEURIST4.ui.switchHintState('prefs_'+this._entityName, this.element, false);
        window.hWin.HEURIST4.ui.applyCompetencyLevel(-1, this.editForm); 
    },

    //
    // show edit form in popup dialog or rigth-hand panel
    //
    addEditRecord: function(recID){
        
        if(this.options.edit_mode == 'none') return;
        
        this._initEditForm_step1(recID);
        
    },
    
    //
    // helper to get field from    this.options.entity.fields  
    //
    getEntityFieldIdx: function(dtID){
        if(this.options.entity && this.options.entity.fields){
                for(var idx in this.options.entity.fields){
                    if(this.options.entity.fields[idx]['dtID']==dtID){
                         return idx;       
                    }
                }
        }
        return -1;
    }
    
});

