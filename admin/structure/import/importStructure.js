/**
* importStructure.js - widget to browse template database, select record type and import it
*
* @package     Heurist academic knowledge management system
* @link        http://HeuristNetwork.org
* @copyright   (C) 2005-2018 University of Sydney
* @author      Artem Osmakov   <artem.osmakov@sydney.edu.au>
* @license     http://www.gnu.org/licenses/gpl-3.0.txt GNU License 3.0
* @version     4.0
*/

/*  
* Licensed under the GNU License, Version 3.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://www.gnu.org/licenses/gpl-3.0.txt
* Unless required by applicable law or agreed to in writing, software distributed under the License is
* distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
* See the License for the specific language governing permissions and limitations under the License.
*/

//  recordList_dbs for database browse = list of records from main index database
//  record type - treeview with individual fields selection

//
// METHODS
//        
//_init - add panels and init ui elements
//_onActionListener - central listener for action events
//_recordListHeaderRenderer  - renderer of header for resultlist
//_recordListItemRenderer    - renderer of item for resultlist
//_recordListGetFullData     - callback function to retrieve full record info (in case we use 2 steps search: ids then list per page)  

//updateRecordList - listener of onresult event generated by searchEtity
//filterRecordList - listener of onfilter event generated by searchEtity. appicable for use_cache only       
//getRecordSet - get subset of current recordset by Ids
    
/*
todo
0. do not current db in list
1. show/hide rectypes that are already in db
2. show/hide fields in tree

3. form structures to add terms, fields, structure, rectype
4. use functions from saveStructureLib

*/

$.widget( "heurist.importStructure", {

    // default options
    options: {
    
        //DIALOG section       
        isdialog: false,  // show as dialog @see  _initDialog(), popupDialog(), closeDialog
        height: 600,
        width:  1100,
        modal:  true,
        title:  'Import structural definitions into current database',
        source_database_id: 0,  //predefined database id ( skip database list selection )
        
        //LIST section 
        pagesize: 2000,      // page size in resultList 
        
        onClose:null
    },
   
    //cached records hRecordSet for databases
    _cachedRecordset_dbs:null,
    
    _selectedDB:null, //regid of currently selected database
    _selectedRtyID:null,
    
    _init_local_rty_once:true,
    
    // the widget's constructor
    _create: function() {
        // prevent double click to select text
        //it prevents inputs in FF this.element.disableSelection();
    }, //end _create
    
    //
    //  load configuration and call _initControls
    //
    _init: function() {

        var that = this;  
            
        if(this.options.isdialog){  //show this widget as popup dialog
            this._initDialog();
        }
        
        //init layout
        var layout = 
                '<div class="ent_wrapper" style="min-width:1000px">'
                        +'<div class="ent_wrapper" id="panel_dbs">'
                        +    '<div class="ent_header searchForm"/>'     
                        +    '<div class="ent_content_full recordList"/>'
                        +'</div>'
                        +'<div class="ent_wrapper" id="panel_rty" style="display:none">'
                        
                            +'<div class="ent_header" style="padding:4px;">'
                               +'<div style="position:absolute;right:450px;left:0">'
                                    +'<h4  style="padding:4 0 0 4" id="h_source_rty"></h4>'     
                                    +'<div id="btn_back_to_databases" style="position:absolute;right:4px;top:2px"/>'
                               +'</div>'
                               
                               +'<div style="border-left:1px solid lightgray;position:absolute;right:225px;width:224px;height:2.8em">'
                                    +'<h4 style="padding:4 0 0 4">Entity to be imported</h4>'
                               +'</div>'
                               +'<div style="border-left:1px solid lightgray;position:absolute;right:0px;width:223px;height:2.8em;">'
                                    +'<h4 style="padding:4 0 0 4">Current entities in database</h4>'
                               +'</div>'
                            +'</div>'

                            //left - source                                
                            +'<div class="ent_wrapper" id="panel_rty_list" style="top:2.8em;right:450px;border-right:1px solid lightgray">'
                            +'</div>'

                            //structure of selected record type - popup
                            +'<div id="panel_rty_tree" '
                                +'style="position:absolute; top:2.8em;bottom:0;right:225px; overflow:hidden;width:225px;">'
                            +    '<div class="ent_header rtt-toolbar" style="text-align:right;height:3em;padding-top: 8px;">'
                                        +'<div id="btn_start_import"></div>'
                            +    '</div>'
                            
                                +'<div id="panel_rty_tree_help" style="text-align:left;padding:200px 15px">'
                                +'<div class="heurist-helper1">'
                                    +'Expand groups on left side to see available entity types.<br><br>'
                                    +'Select an entity type to see the list of fields it contains<br><br>'
                                    +'Click button above to add the selected entity type to the current database'
                                +'</div></div>'
                            
                            +    '<div class="ent_content rtt-tree" style="bottom:6em;display:none;top:4em"/>'
                            +    '<div class="ent_footer" style="height:6em;font-size:0.8em;display:none">'
                                    +'<div class="heurist-helper1">'
                                        +'Grayed out fields are already in current database.<br>'
                                        +'Arrows are record pointer fields<br>'
                                        +'Mouse over to view more information'
                                    +'</div>'
                            +    '</div>'
                            +'</div>'
                            
                            //target
                            +'<div id="panel_rty_list_target" '
                                +'style="position:absolute; top:2.8em;bottom:0;right:0px; overflow:hidden;width:225px;">'
                                +'<select id="select_rty_list_target" size="500" style="width:100%;height:100%;border:lightgray 1px solid"/>'
                            +'</div>'
                            
                        +'</div>'
                        
                        //report after comletion of import
                        +'<div class="ent_wrapper" id="panel_report" style="display:none">'
                            +    '<div class="ent_content_full" style="bottom:2.8em;top:0;padding:10px"/>'
                            +    '<div class="ent_footer" style="text-align:center"><div id="btn_close_panel_report"/></div>'
                        +'</div>'
                        
                +'</div>';
        $(layout).appendTo(this.element);
        
        this.panel_report = this.element.find('#panel_report');
        this.panel_rty = this.element.find('#panel_rty');
        this.panel_rty_list = this.element.find('#panel_rty_list');
        this.panel_rty_list_target = this.element.find('#panel_rty_list_target');
        this.select_rty_list_target = this.element.find('#select_rty_list_target');
        this.panel_rty_structure = this.element.find('#panel_rty_tree');
            
        this.btn_import = this.panel_rty_structure.find('#btn_start_import');
        this.btn_import.button({icon: 'ui-icon-arrowthick-1-e', iconPosition:'begin', label:'add to database'})
                    //.css({'line-height': '0.9em'})
                    .click(function(){
                        that.startImport();
                    });
        //this.panel_rty_structure
        this.btn_import.find('.ui-icon').css({'color':'red'});
        window.hWin.HEURIST4.util.setDisabled(this.btn_import, true);
            
        this.panel_report.find('#btn_close_panel_report')
        .button({icon: 'ui-icon-carat-1-w', iconPosition:'right', label:'Back to Record Type List'})
        //.css({'line-height': '0.9em'})
        .click(function(){
            that.panel_report.hide();
            that.panel_rty.show();
            //refresh source
            that.panel_rty_list.manageDefRecTypes('getRecordsetFromStructure', window.hWin.HEURIST4.remote.rectypes );
            //refresh target
            //that.panel_rty_list_target.manageDefRecTypes('getRecordsetFromStructure');
            window.hWin.HEURIST4.ui.createRectypeSelect(that.select_rty_list_target[0],null,null,true);
            
            that.panel_rty_structure.css({visibility:'visible'});
            that.panel_rty_structure.find('#panel_rty_tree_help').show();
            that.panel_rty_structure.find('.ent_content').hide();
            that.panel_rty_structure.find('.ent_footer').hide();
            window.hWin.HEURIST4.util.setDisabled(that.btn_import, true);
        });
        
        
        var ele = this.element.find('#btn_back_to_databases')
                    .button({label:'Back to Databases'});
        if(that.options.source_database_id>0){
            ele.hide();
        }else{
            this._on( ele, {'click':this._backToDatabases} );    
        }
        
        
        //find 3 elements searchForm, recordList+recordList_toolbar, editForm+editForm_toolbar
        this.recordList_dbs = this.element.find('#panel_dbs .recordList');
        this.searchForm_dbs = this.element.find('#panel_dbs .searchForm');

            //init record list for dbs and rty
            this.recordList_dbs
                .resultList({
                           eventbased: false, 
                           isapplication: false, //do not listent global events @todo merge with eventbased
                           multiselect: false,
                           select_mode: 'select_single', // none
                           
                           entityName: 'Records',
                           view_mode: 'list',
                           show_viewmode: false,
                           
                           recordDiv_class: 'recordDiv_blue',
                           
                           pagesize: (this.options.pagesize>0) ?this.options.pagesize: 9999999999999,
                           empty_remark: '<div style="padding:1em 0 1em 0">No registered databases found</div>',

                           groupByField: 'rec_RecTypeID',
                           rendererGroupHeader: function(grp_val){
                               if(grp_val==0){
                                   return '<div style="width:100%;padding:4px 0 4px 40px;border-bottom:1px solid lightgray">'
                                   +'<h2>Curated templates</h2>'
                                   +'<div style="padding-top:4px;"><i>Databases curated by the Heurist team as a source of useful entity types for new databases</i></div></div>';
                               }else{
                                   return '<div style="width:100%;padding:4px 0 4px 40px;border-bottom:1px solid lightgray">'
                                   +'<h2>User databases</h2>'
                                   +'<div style="padding-top:4px"><i>Databases registered by Heurist users - use with care, look for entity types with good internal documentation</i></div></div>';
                               }
                               
                               
                           },
                           
                           rendererHeader:  function(){
            sHeader = '<div style="width:62px">Reg#</div><div style="width:23em">Database Name</div>'
                    +'<div style="width:31em">Description</div>'
                    +'<div style="width:5em">URL</div>';
                                return sHeader;
                           },
                           renderer:
                           function(recordset, record){ 
                                    return that._recordListItemRenderer_dbs(recordset, record); 
                           }
                });     
                
            this._on( this.recordList_dbs, {
                            "resultlistonselect": function(event, selected_recs){
                                // show list of record types for selected database
                                that._loadRecordTypesForDb( selected_recs );
                                
                            },
                            "resultlistonaction": this._onActionListener        
            });
            
            //help text
            $('<div>')
                .text('Please select a database in the list below to see entity (record) types wich you might wish to import')
                .addClass('heurist-helper1')
                .css({padding:'7px 30px'})
                .appendTo(this.recordList_dbs.find('.div-result-list-toolbar'));
                

                  
            //init search panel
            this.searchForm_dbs.load(window.hWin.HAPI4.baseURL
                        +'hclient/widgets/entity/searchSysDatabases.html?t'
                        +window.hWin.HEURIST4.util.random(), 
            function(response, status, xhr){
                
                //init buttons
                that.btn_search_start = that.searchForm_dbs.find('#btn_search_start')
                    //.css({'width':'6em'})
                    .button({label: window.hWin.HR("Start search"), showLabel:false, 
                            icon:"ui-icon-search", iconPosition:'end'});
                     
                        
                //this is default search field - define it in your instance of html            
                that.input_search = that.searchForm_dbs.find('#input_search');
                
                that._on( that.input_search, { keypress: that.startSearchOnEnterPress });
                that._on( that.btn_search_start, { click: that.startSearch_dbs });            
                
                that.searchForm_dbs.find('#input_search_type_div2').show();
                that.input_search_type = that.searchForm_dbs.find('#input_search_type2');
                that._on(that.input_search_type,  { change:that.startSearch_dbs });
                
                that.input_sort_type = that.searchForm_dbs.find('#input_sort_type');
                that.input_sort_type.val('register');
                that._on(that.input_sort_type,  { change:that.startSearch_dbs });
                
            });
            

    //----------------------       
            var that = this;
            
            window.hWin.HEURIST4.msg.bringCoverallToFront(this.element);
            
            window.hWin.HAPI4.EntityMgr.getEntityConfig('records', 
            function(entity){
                that.options.entity = entity;
                            
                //retrieve all template databases from master index server
                var query_request = {remote:'master'};
                if(that.options.source_database_id>0){
                    query_request['q'] = 'ids:'+that.options.source_database_id;
                }
                
                window.hWin.HAPI4.RecordMgr.search(query_request, 
                    function( response ){
                        window.hWin.HEURIST4.msg.sendCoverallToBack();
                        
                        if(response.status == window.hWin.ResponseStatus.OK){
                            
                            response.data.fields.push('rec_ScratchPad');
                            
                            that._cachedRecordset_dbs = new hRecordSet(response.data);
                            
                            //prepare recordset - extract database name and transfer title to notes
                            that._cachedRecordset_dbs.each(function(recID, record){
                                
                                    var recURL  = this.fld(record, 'rec_URL');
                                    var recDesc = this.fld(record, 'rec_Title');
                            
                                    var splittedURL = recURL.split('?');
                                    var dbURL = splittedURL[0];
                                    var matches = recURL.match(/db=([^&]*).*$/);
                                    var dbName = (matches && matches.length>1)?matches[1]:'';
            
                                    this.setFld(record, 'rec_URL', dbURL);
                                    this.setFld(record, 'rec_Title', dbName);
                                    this.setFld(record, 'rec_ScratchPad', recDesc);
                                    this.setFld(record, 'rec_RecTypeID', recID<1000?0:1);
                            });
                            
                            if(that.options.source_database_id>0){
                                var selected_recs = that._cachedRecordset_dbs.getSubSetByIds( [that.options.source_database_id] );
                                that._loadRecordTypesForDb( selected_recs );
                            }else{
                                that.startSearch_dbs(); //filterRecordList_dbs({}); 
                            }

                        }else{
                            window.hWin.HEURIST4.msg.showMsgErr(response);
                        }
                    }
                );
                            
            });

        //----------------------------                
        //show dialog if required 
        if(this.options.isdialog){
            this.popupDialog();
        }
        
        this._fixWidth();
        
        window.hWin.HEURIST4.ui.applyCompetencyLevel(-1, this.element); 
        
    },

    //
    //
    //    
    startSearchOnEnterPress: function(e){
        
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            window.hWin.HEURIST4.util.stopEvent(e);
            e.preventDefault();
            this.startSearch_dbs();
        }

    },
    
    startSearch_dbs: function(){
            var request = {};
            
            if(this.input_search.val()!=''){
                request['rec_Title'] = this.input_search.val();
            }
            
            if(this.input_search_type.val()!=''){
                if(this.input_search_type.val()=='curated'){
                    request['rec_ID'] = '<1000';
                }else if(this.input_search_type.val()=='user'){
                    request['rec_ID'] = '>999';
                }
            }
            
            if(this.input_sort_type.val()=='name'){
                request['sort:rec_Title'] = 1;
            }else if(this.input_sort_type.val()=='register'){
                request['sort:rec_ID'] = 1;
            }else  if(this.input_sort_type.val()=='url'){
                request['sort:rec_URL'] = -1;
            }
            
            this.filterRecordList_dbs(request);
    },

    //
    // init manageDefRecTypes widget on panel_rty
    //
    _loadRecordTypesForDb: function(db_ids){

        var that = this;
        var panel_dbs = this.element.find('#panel_dbs');
        
        var record = db_ids.getFirstRecord();//this._cachedRecordset_dbs.getById(db_ids[0]);
        
        var sDB_ID = db_ids.fld(record, 'rec_ID');
        var sURL  = db_ids.fld(record, 'rec_URL');
        var sDB   = db_ids.fld(record, 'rec_Title');
        
        
        if(this._selectedDB != sDB_ID){
            
            this._selectedDB = sDB_ID;
            
            //TEMP replace all folders to h5-ao to get correct output
            if(sURL.indexOf('http://heurist.sydney.edu.au/')==0){
                sURL = 'http://heurist.sydney.edu.au/h5-ao/'    
            }
            
            this.element.find('#h_source_rty').text('Entities available in '+sDB_ID+':'+sDB);
            
            var options = {
                isdialog: false,
                container: '#panel_rty_list',
                select_mode: 'select_single',
                
                simpleSearch: true,
                
                import_structure:{
                       database: sDB,      //database name
                       databaseURL: sURL,
                       database_url:  (sURL+'?db='+sDB)
                },
                
                onselect:function(event, data){
                    
                    //show treeview
                    if(data && data.selection && data.selection.length>0){
                        that._loadRecordTypesTreeView(data.selection[0]);
                    }
                    
                    
                    
                },
                
                recordList:{
                    show_toolbar: false,
                    pagesize: 4999, 
                    view_mode:'list',
                    simpleSearch:true,
                    groupByField:'rty_RecTypeGroupID',
                    groupOnlyOneVisible: true,
                    groupByCss:'0 1.5em',
                    rendererGroupHeader: function(grp_val, grp_keep_status){

                        var rectypes = window.hWin.HEURIST4.remote.rectypes;
                        var idx = rectypes.groups.groupIDToIndex[grp_val];

                        var is_expanded = (grp_keep_status[grp_val]!=0);

                        return rectypes.groups[idx]?('<div data-grp="'+grp_val
                            +'" style="font-size:0.9em;padding:14px 0 4px 0px;border-bottom:1px solid lightgray">'
                            +'<span style="display:inline-block;vertical-align:top;padding-top:10px;" class="ui-icon ui-icon-triangle-1-'+(is_expanded?'s':'e')+'"></span>'
                            +'<div style="display:inline-block;width:70%">'
                            +'<h2>'+grp_val+' '+rectypes.groups[idx].name+'</h2>'
                            +'<div style="padding-top:4px;"><i>'+rectypes.groups[idx].description+'</i></div></div></div>'):'';
                    }
                }
            };
            
            this.panel_rty_list.empty();
            window.hWin.HEURIST4.ui.showEntityDialog('defRecTypes', options);
            
        }
        panel_dbs.hide();
        this.panel_rty.show();
        

        if( this._init_local_rty_once ){
            
            this._init_local_rty_once = false;
            
            window.hWin.HEURIST4.ui.createRectypeSelect(this.select_rty_list_target[0],null,null,true);
            
            /*
            //load list of locat rtys        
            window.hWin.HEURIST4.ui.showEntityDialog('defRecTypes', {                
                isdialog: false,
                container: '#panel_rty_list_target',
                select_mode: 'select_single',
                recordList:{
                    show_toolbar: false,
                    pagesize: 4999, 
                    view_mode:'list',
                    groupByField:'rty_RecTypeGroupID',                    
                    groupByCss: {padding:'0 1.5em'},
                    renderer: function( recordset, record ){
                        
                        var recTitle = window.hWin.HEURIST4.util.htmlEscape(recordset.fld(record, 'rec_Title'));
                        return '<div class="recordDiv" style="padding-left:3em">AAAA'+recTitle+'</div>';
                    },
                    rendererGroupHeader: function(grp_val, grp_keep_status){
                    
                        var rectypes = window.hWin.HEURIST4.rectypes;
                        var idx = rectypes.groups.groupIDToIndex[grp_val];
                
                        var is_expanded = (grp_keep_status[grp_val]!=0);
                
                        return rectypes.groups[idx]?('<div data-grp="'+grp_val
                            +'" style="font-size:0.9em;padding:14px 0 4px 0px">'
                            +'<span style="display:inline-block;vertical-align:top;padding-top:10px;" '
                                    +'class="ui-icon ui-icon-triangle-1-'+(is_expanded?'s':'e')+'"></span>'
                            +'<div style="display:inline-block;font-weight:bold;width:70%">'
                            +rectypes.groups[idx].name+'</div></div>'):'';
                    }
                },
                layout_mode: ('<div class="ent_wrapper">'
                        +  '<div class="ent_header searchForm" style="display:none;"/>'     
                        +  '<div class="ent_content_full recordList"/>'
                +'</div>')
            });
            */
        }
    },
    
    _backToDatabases: function(){
        this.panel_rty.hide();
        this.element.find('#panel_dbs').show();
        //this.panel_rty_structure.css({visibility:'hidden'});
        this.panel_rty_structure.find('#panel_rty_tree_help').show();
        this.panel_rty_structure.find('.ent_content').hide();
        this.panel_rty_structure.find('.ent_footer').hide();
        window.hWin.HEURIST4.util.setDisabled(this.btn_import, true);

        
        this._selectedRtyID = null;
    },
    
   
    //
    // show treeview with record type structure as popup
    //
    _loadRecordTypesTreeView: function(rtyID){
        
        //var panel_rty = this.panel_rty_list.css({right:'300px'});
        
                //.css({left: this.element.find('#panel_rty').width()-300 }).show();
        var that = this;
        
        if(this._selectedRtyID!=rtyID ){
        
            this._selectedRtyID = rtyID;
            
            //generate treedata from rectype structure
            var treedata = window.hWin.HEURIST4.dbs.createRectypeStructureTree( window.hWin.HEURIST4.remote, 5, rtyID, ['all'] );
            
            treedata[0].expanded = true; //first expanded
            
            //load treeview
            var treediv = this.element.find('.rtt-tree');
            if(!treediv.is(':empty')){
                treediv.fancytree("destroy");
            }
            
            treediv.addClass('tree-facets').fancytree({
                //extensions: ["filter"],
                //            extensions: ["select"],
                checkbox: true,
                selectMode: 3,  // hierarchical multi-selection
                source: treedata,
                beforeSelect: function(event, data){
                    // A node is about to be selected: prevent this, for folder-nodes:
                    if( data.node.hasChildren() ){
                        return false;
                    }
                },
                lazyLoad: function(event, data){
                    var node = data.node;
                    var parentcode = node.data.code; 
                    var rectypes = node.data.rt_ids;
                    
                    var res = window.hWin.HEURIST4.dbs.createRectypeStructureTree( window.hWin.HEURIST4.remote, 
                                        5, rectypes, ['all'], parentcode );
                    if(res.length>1){
                        data.result = res;
                    }else{
                        data.result = res[0].children;
                    }
                    
                    return data;                                                   
                },
                loadChildren: function(e, data){
                  
//console.log(data);                     
//                        var tree = treediv.fancytree("getTree");
                        data.node.visit(function(node){
                            var lcode = node.data.dtyID_local>0 ?node.data.dtyID_local:node.data.rtyID_local;
                            if(lcode>0){
                                 node.setSelected(true);
                                 node.unselectable = true;
                                 node.extraClasses = 'graytext';
                                 node.tooltip = (window.hWin
                                    .HEURIST4[node.data.dtyID_local>0?'detailtypes':'rectypes'].names[lcode])+' #'+lcode;
                                 //node.unselectableStatus = true;
                            }                     
                            
                            //debug node.tooltip = node.data.rt_ids+'  '+node.data.type;
                            
                            //hide checkbox for all expcet resource
                            if(!(((node.data.type=='resource' || 
                                 node.data.type=='relmarker') && node.data.rt_ids) || 
                                 node.data.type=='rectype'))
                            {
                                node.hideCheckbox = true;    
                            }
                            
                        });
                },
                select: function(e, data) {
                },
                click: function(e, data){
                   if($(e.originalEvent.target).is('span') && data.node.children && data.node.children.length>0){
                       data.node.setExpanded(!data.node.isExpanded());
                       //treediv.find('.fancytree-expander').hide();
                       
                   }else if( data.node.lazy) {
                       data.node.setExpanded( true );
                   }
                },
                dblclick: function(e, data) {
                    data.node.toggleSelected();
                },
                keydown: function(e, data) {
                    if( e.which === 32 ) {
                        data.node.toggleSelected();
                        return false;
                    }
                }
            });

            //check and disable nodes for entities that are already in database
            /*
            var tree = treediv.fancytree("getTree");            
            tree.visit(function(node){
                if(node.data.dtyID_local>0){
                     node.setSelected(true);
                     node.unselectable = true;
                     //node.unselectableStatus = true;
                     if(!node.hasChildren())
                        $(node.li).css('color','green');
                     
                }
            });
            */
            //hide all folder triangles
            //treediv.find('.fancytree-expander').hide();
            /*
            this.dlgRtTree = window.hWin.HEURIST4.msg.showElementAsDialog({element:panel_rty_structure[0],height:400, width:300});
            this.dlgRtTree.addClass('ui-heurist-bg-light');
            */
            //this.panel_rty_structure.css({visibility:'visible'});
            this.panel_rty_structure.find('#panel_rty_tree_help').hide();
            this.panel_rty_structure.find('.ent_content').show();
            this.panel_rty_structure.find('.ent_footer').show();
            window.hWin.HEURIST4.util.setDisabled(this.btn_import, false);
                
            
            this.panel_rty_structure.find('#btn_start_import').focus();
        }
    },
    
    //Called whenever the option() method is called
    //Overriding this is useful if you can defer processor-intensive changes for multiple option change
    _setOptions: function( ) {
        this._superApply( arguments );
    },

    /* 
    * private function 
    * show/hide buttons depends on current login status
    */
    _refresh: function(){

    },
    // 
    // custom, widget-specific, cleanup.
    _destroy: function() {
        // remove generated elements
        if(this.searchForm_dbs) this.searchForm_dbs.remove();
        if(this.recordList_dbs) this.recordList_dbs.remove();

        //if(this.searchForm_rty) this.searchForm_rty.remove();
        //if(this.recordList_rty) this.recordList_rty.remove();
    },
    
    //----------------------
    //
    // listener of action button/menu clicks - central listener for action events
    //
    _onActionListener:function(event, action){
        if(action=='select-and-close'){
             //this._selectAndClose();
             return true;
        } else {
             var recID = 0;
             if(action && action.action){
                 recID =  action.recID;
                 action = action.action;
             }
         }
        return false;
    },

    //
    // DBS: renderer of item for resultlist
    //
    _recordListItemRenderer_dbs:function(recordset, record){

        function fld(fldname){
            return recordset.fld(record, fldname);
        }

        
        var recID = fld('rec_ID');
        var recURL = fld('rec_URL');
        var dbName = fld('rec_Title');
        var recTitle = window.hWin.HEURIST4.util.htmlEscape(fld('rec_ScratchPad'));
        
        /*var splittedURL = recURL.split('?');
        var dbURL = splittedURL[0];
        var matches = recURL.match(/db=([^&]*).*$/);
        var dbName = (matches && matches.length>1)?matches[1]:'';
        //get database and server url
        var recTitle = window.hWin.HEURIST4.util.htmlEscape(fld('rec_Title'));
        */
        
        var rtIcon = window.hWin.HAPI4.getImageUrl('sysDatabases', 0, 'icon');
        var recThumb = window.hWin.HAPI4.getImageUrl('sysDatabases', recID, 'thumb');
        
        var html_thumb = '<div class="recTypeThumb" style="background-image: url(&quot;'+recThumb+'&quot;);opacity:1">'
        +'</div>';
        
        var recTitle = '<div class="item" style="width:3em">'+recID+'</div>'
                      +'<div class="item" style="width:25em;'+(recID<1000?'font-weight:bold':'')
                                                        +'">'+dbName+'</div>'
                      +'<div class="item" style="width:35em" title="'+recTitle+'">'+recTitle+'</div>'
                      +'<div class="item" style="width:20em;padding-left:4px"><a href="'
                                +recURL+'?db='+dbName+'" target="_blank">'
                        + window.hWin.HEURIST4.util.htmlEscape(recURL)+'</a></div>';
        
        var html = '<div class="recordDiv" id="rd'+recID+'" recid="'+recID+'">'
        + html_thumb
        + '<div class="recordSelector"><input type="checkbox" /></div>'
        + '<div class="recordIcons">' //recid="'+recID+'" bkmk_id="'+bkm_ID+'">'
        +     '<img src="'+window.hWin.HAPI4.baseURL+'hclient/assets/16x16.gif'
        +     '" style="background-image: url(&quot;'+rtIcon+'&quot;);">'
        + '</div>'
        + '<div class="recordTitle" style="left:40px !important">'
        +     recTitle 
        + '</div></div>';
        
       

        return html;
    
    },
    
    //
    // init dialog widget 
    //
    _initDialog: function(){
        
            var options = this.options,
                btn_array = [], 
                position = null,
                    that = this;
                    
            
            if(position==null) position = { my: "center", at: "center", of: window };
            var maxw = (window.hWin?window.hWin.innerWidth:window.innerWidth);
            if(options['width']>maxw) options['width'] = maxw*0.95;
            var maxh = (window.hWin?window.hWin.innerHeight:window.innerHeight);
            if(options['height']>maxh) options['height'] = maxh*0.95;
            
            //this.options.window = window.hWin;
            this.element.addClass('ui-heurist-bg-light');
            
            var $dlg = this.element.dialog({
                autoOpen: false ,
                //element: this.element[0],
                height: options['height'],
                width:  options['width'],
                modal:  (options['modal']!==false),
                title: window.hWin.HEURIST4.util.isempty(options['title'])?'':options['title'], //title will be set in  initControls as soon as entity config is loaded
                position: position,
                resizeStop: function(){ that._fixWidth(); },
                close:function(){
                    
                    if($.isFunction(that.options.onClose)){
                      //that.options.onClose(that._currentEditRecordset);  
                      that.options.onClose.call();
                    } 
                    
                    $dlg.parent().remove(); 
                    that.element.remove();
                }
            }); 
            this._as_dialog = $dlg; 
    },

    _fixWidth: function() {//fix bug
            var correctWidth = this.element.parent().width()-24;
            this.element.css({overflow: 'none !important','width':correctWidth });
            
            /*this.panel_rty_list.css({'width': correctWidth/2});
            this.panel_rty_list_target.css({'left': correctWidth/2+1});*/
    },
    
    //
    // show itself as popup dialog
    //
    popupDialog: function(){
        if(this.options.isdialog){

            this._as_dialog.dialog("open");
            
            window.hWin.HEURIST4.ui.initDialogHintButtons(this._as_dialog,
                null, //'prefs_'+this._entityName,
                window.hWin.HAPI4.baseURL+'context_help/importStructure.html #content', false);
                
        }
    },
    
    //--------------- WORK WITH LIST
    //
    // listener of onfilter event generated by search
    //
    filterRecordList_dbs: function(request){
        var subset = null;
        if(this._cachedRecordset_dbs){
            subset = this._cachedRecordset_dbs.getSubSetByRequest(request, this.options.entity.fields);
            this.recordList_dbs.resultList('updateResultSet', subset, request);   
        }
        return subset;
    },
    
    
    //
    //
    //
    startImport: function(){
        
        this.panel_rty_structure.css({visibility:'hidden'});
        /*
        if(this.dlgRtTree) {
            this.dlgRtTree.dialog('close');   
            this.dlgRtTree = null;
        }
        */
        
        var rtyCode = this._selectedDB + '-' + this._selectedRtyID;
        
        var request = {code:rtyCode, db:window.hWin.HAPI4.database}
        
        var url = window.hWin.HAPI4.baseURL + 'admin/structure/import/importRectype.php';
        
        var that = this;
        
        window.hWin.HEURIST4.msg.bringCoverallToFront(this.element);
        
        window.hWin.HEURIST4.util.sendRequest(url, request, null, function(response){    

            window.hWin.HEURIST4.msg.sendCoverallToBack(); 

            if(response.status == window.hWin.ResponseStatus.OK){
                
                //refresh local definitions
                if(response.data.rectypes) window.hWin.HEURIST4.rectypes = response.data.rectypes;
                if(response.data.detailtypes) window.hWin.HEURIST4.detailtypes = response.data.detailtypes;
                if(response.data.terms) window.hWin.HEURIST4.terms = response.data.terms;
                
                window.hWin.HAPI4.triggerEvent(window.hWin.HAPI4.Event.ON_STRUCTURE_CHANGE);
                that.panel_report.find('#btn_close_panel_report').click();
                
                
                var report = ''
                var theader = '<table style="padding: 5px;font-size: 1em;">'
                +'<tr><th colspan="2">Source</th><th>Concept ID</th><th colspan="3">Target</th></tr>'
                +'<tr><th>ID</th><th>Name</th><th>&nbsp;</th><th>ID</th><th>Name</th><th></th></tr>';
                
                if(response.report.rectypes) {
            report = report + '<h3>Record types</h3>'+theader
                + response.report.rectypes
                + '</table>';
                }
                
                if(response.report.detailtypes) {
            report = report + '<h3>Field types</h3>'+theader
                + response.report.detailtypes
                + '</table>';
                }
                
                if(response.report.terms) {
            report = report + '<h3>Terms</h3>'+theader
                + response.report.terms
                + '</table>';
                }
               
                if(report!=''){ 
                    
                    report = 'Import completed successfully';
                    
                    window.hWin.HEURIST4.msg.showMsgFlash(report,4000);
                    
                    /*
                    report = '<div style="font-size:0.9em;"><h2>Record type and associated structures imported</h2>'
                                +report
                                +'</div>'
                                +'<div id="btn_back_to_rty"></div>';
                                
                    that.panel_rty.hide();
                    that.panel_report.find('.ent_content_full').html(report);
                    that.panel_report.show();
                    */
                
                }else{
                    report = 'Nothing imported. '+
                    'Record types (and associated strucures) you selected to be imported are in this database already';
                    
                    window.hWin.HEURIST4.msg.showMsgDlg(report);
                }
                
            }else{
                window.hWin.HEURIST4.msg.showMsgErr(response);
            }
            
        });
        
    }
    
});
