/**
* importStructure.js - widget to browse template database, select record type and import it
*
* @package     Heurist academic knowledge management system
* @link        http://HeuristNetwork.org
* @copyright   (C) 2005-2018 University of Sydney
* @author      Artem Osmakov   <artem.osmakov@sydney.edu.au>
* @license     http://www.gnu.org/licenses/gpl-3.0.txt GNU License 3.0
* @version     4.0
*/

/*  
* Licensed under the GNU License, Version 3.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://www.gnu.org/licenses/gpl-3.0.txt
* Unless required by applicable law or agreed to in writing, software distributed under the License is
* distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
* See the License for the specific language governing permissions and limitations under the License.
*/

//  recordList_dbs for database browse = list of records from main index database
//  recordList_rty - select record type
//  record type - treeview with individual fields selection

//
// METHODS
//        
//_init - add panels and init ui elements
//_onActionListener - central listener for action events
//_recordListHeaderRenderer  - renderer of header for resultlist
//_recordListItemRenderer    - renderer of item for resultlist
//_recordListGetFullData     - callback function to retrieve full record info (in case we use 2 steps search: ids then list per page)  

//updateRecordList - listener of onresult event generated by searchEtity
//filterRecordList - listener of onfilter event generated by searchEtity. appicable for use_cache only       
//getRecordSet - get subset of current recordset by Ids
    


$.widget( "heurist.importStructure", {

    // default options
    options: {
    
        //DIALOG section       
        isdialog: false,  // show as dialog @see  _initDialog(), popupDialog(), closeDialog
        height: 400,
        width:  760,
        modal:  true,
        title:  '',
        
        //LIST section 
        pagesize: 200      // page size in resultList 
    },
   
    //cached records hRecordSet for databases
    _cachedRecordset_dbs:null,
    
    // the widget's constructor
    _create: function() {
        // prevent double click to select text
        //it prevents inputs in FF this.element.disableSelection();
    }, //end _create
    
    //
    //  load configuration and call _initControls
    //
    _init: function() {

            
        if(this.options.isdialog){  //show this widget as popup dialog
            this._initDialog();
        }
        
        //init layout
        var layout = 
                '<div class="ent_wrapper">'
                        +'<div class="ent_wrapper" id="panel_dbs">'
                        +    '<div class="ent_header searchForm"/>'     
                        +    '<div class="ent_content_full recordList"/>'
                        +'</div>'
                        +'<div class="ent_wrapper" id="panel_rty" style="display:none">'
                        //+    '<div class="ent_header searchForm"/>'
                        //+    '<div class="ent_content_full recordList"/>'
                        +'</div>'
                +'</div>';
        $(layout).appendTo(this.element);
        
        //find 3 elements searchForm, recordList+recordList_toolbar, editForm+editForm_toolbar
        this.recordList_dbs = this.element.find('#panel_dbs .recordList');
        this.searchForm_dbs = this.element.find('#panel_dbs .searchForm');

        //this.recordList_rty = this.element.find('#panel_rty .recordList');
        //this.searchForm_rty = this.element.find('#panel_rty .searchForm');

        var that = this;
        //init record list for dbs and rty
        this.recordList_dbs
            .resultList({
                       eventbased: false, 
                       isapplication: false, //do not listent global events @todo merge with eventbased
                       multiselect: false,
                       select_mode: 'select_single', // none
                       
                       entityName: 'Records',
                       view_mode: 'list',
                       show_viewmode: false,
                       
                       pagesize: (this.options.pagesize>0) ?this.options.pagesize: 9999999999999,
                       empty_remark: '<div style="padding:1em 0 1em 0">No registered databases found</div>',

                       rendererHeader:  function(){
        sHeader = '<div style="width:62px">Reg#</div><div style="width:13em">Database Name</div>'
                +'<div style="width:28em">Description</div>'
                +'<div style="width:5em">URL</div>';
                            return sHeader;
                       },
                       renderer:
                       function(recordset, record){ 
                                return that._recordListItemRenderer_dbs(recordset, record); 
                       }
            });     
            
        this._on( this.recordList_dbs, {
                        "resultlistonselect": function(event, selected_recs){
                            // show list of record types for selected database
                            that._loadRecordTypesForDb( selected_recs );
                            
                        },
                        "resultlistonaction": this._onActionListener        
        });
              
        //init search panel
        this.searchForm_dbs.load(window.hWin.HAPI4.baseURL
                    +'hclient/widgets/entity/searchSysDatabases.html?t'
                    +window.hWin.HEURIST4.util.random(), 
        function(response, status, xhr){
            
            //init buttons
            that.btn_search_start = that.searchForm_dbs.find('#btn_search_start')
                //.css({'width':'6em'})
                .button({label: window.hWin.HR("Start search"), showLabel:false, 
                        icon:"ui-icon-search", iconPosition:'end'});
                 
                    
            //this is default search field - define it in your instance of html            
            that.input_search = that.searchForm_dbs.find('#input_search');
            
            that._on( that.input_search, { keypress: that.startSearchOnEnterPress });
            that._on( that.btn_search_start, { click: that.startSearch_dbs });            
            
            that.searchForm_dbs.find('#input_search_type_div2').show();
            that.input_search_type = that.searchForm_dbs.find('#input_search_type2');
            that._on(that.input_search_type,  { change:that.startSearch_dbs });
            
            that.input_sort_type = that.searchForm_dbs.find('#input_sort_type');
            that.input_sort_type.val('register');
            that._on(that.input_sort_type,  { change:that.startSearch_dbs });
            
        });
        
//------------------------ rty panel

        /*init record list for dbs and rty
        this.recordList_rty
            .resultList({
                       eventbased: false, 
                       isapplication: false, //do not listent global events @todo merge with eventbased
                       multiselect: false,
                       select_mode: 'select_single', // none
                       
                       entityName: 'defRecTypes',
                       view_mode: 'list',
                       
                       pagesize: (this.options.pagesize>0) ?this.options.pagesize: 9999999999999,
                       empty_remark: '<div style="padding:1em 0 1em 0">No record types found</div>',

                       rendererHeader:
                            function(){
                                var s = '<div style="width:40px"></div><div style="width:3em">ID</div>'
                                            +'<div style="width:13em">Name</div>'
                                            +'<div style="width:20em;border:none;">Description</div>';
                                    
                                if (false && window.hWin.HAPI4.is_admin()){
                                        s = s+'<div style="position:absolute;right:4px;width:60px">Edit</div>';
                                }
                                    
                                return s;
                            }
            });     
            
        this._on( this.recordList_rty, {
                        "resultlistonselect": function(event, selected_recs){
                            // show list of record types for selected database
                            //that.
                            
                        },
                        "resultlistonaction": this._onActionListener        
        });
        
        //init search panel
        this.searchForm_rty.load(window.hWin.HAPI4.baseURL
                    +'hclient/widgets/entity/searchDefRecTypes.html?t'
                    +window.hWin.HEURIST4.util.random(), 
        function(response, status, xhr){
            
            //init buttons
            that.btn_search_start_rty = that.searchForm_rty.find('#btn_search_start')
                //.css({'width':'6em'})
                .button({label: window.hWin.HR("Start search"), showLabel:false, 
                        icon:"ui-icon-search", iconPosition:'end'});
                 
                    
            //this is default search field - define it in your instance of html            
            that.input_search_rty = that.searchForm_rty.find('#input_search');
            
            that._on( that.input_search, { keypress: function(e){that.startSearchOnEnterPress(e,'rty')} });
            that._on( that.btn_search_start_rty, { click: that.startSearch_rty });            
            
            that.input_search_group_rty = that.searchForm_rty.find('#input_search_group');
            that._on(that.input_search_group_rty,  { change:that.startSearch_rty });
            
            that.input_sort_type_rty = that.searchForm_rty.find('#input_sort_type');
            that._on(that.input_sort_type_rty,  { change:that.startSearch_rty });
            
        });
        */


//----------------------       
        //show dialog if required 
        if(this.options.isdialog){
            this.popupDialog();
        }
        
        window.hWin.HEURIST4.ui.applyCompetencyLevel(-1, this.element); 

        var that = this;
        
        window.hWin.HAPI4.EntityMgr.getEntityConfig('records', 
        function(entity){
            that.options.entity = entity;
                        
            //retrieve all template databases from master index server
            var query_request = {remote:'master'};
            window.hWin.HAPI4.RecordMgr.search(query_request, 
                function( response ){
                    if(response.status == window.hWin.ResponseStatus.OK){
                        
                        window.hWin.HEURIST4.msg.sendCoverallToBack();
                        
                        response.data.fields.push('rec_ScratchPad');
                        
                        that._cachedRecordset_dbs = new hRecordSet(response.data);
                        
                        //prepare recordset - extract database name and transfer title to notes
                        that._cachedRecordset_dbs.each(function(recID, record){
                            
                                var recURL  = this.fld(record, 'rec_URL');
                                var recDesc = this.fld(record, 'rec_Title');
                        
                                var splittedURL = recURL.split('?');
                                var dbURL = splittedURL[0];
                                var matches = recURL.match(/db=([^&]*).*$/);
                                var dbName = (matches && matches.length>1)?matches[1]:'';
        
                                this.setFld(record, 'rec_URL', dbURL);
                                this.setFld(record, 'rec_Title', dbName);
                                this.setFld(record, 'rec_ScratchPad', recDesc);
                        });
                        
                        that.filterRecordList_dbs({}); 

                    }else{
                        window.hWin.HEURIST4.msg.showMsgErr(response);
                    }
                }
            );
                        
        });
                
        
    },

    //
    //
    //    
    startSearchOnEnterPress: function(e){
        
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            window.hWin.HEURIST4.util.stopEvent(e);
            e.preventDefault();
            this.startSearch_dbs();
        }

    },
    
    startSearch_dbs: function(){
            var request = {};
            
            if(this.input_search.val()!=''){
                request['rec_Title'] = this.input_search.val();
            }
            
            if(this.input_search_type.val()!=''){
                if(this.input_search_type.val()=='curated'){
                    request['rec_ID'] = '<1000';
                }else if(this.input_search_type.val()=='user'){
                    request['rec_ID'] = '>999';
                }
            }
            
            if(this.input_sort_type.val()=='name'){
                request['sort:rec_Title'] = 1;
            }else if(this.input_sort_type.val()=='register'){
                request['sort:rec_ID'] = 1;
            }else  if(this.input_sort_type.val()=='url'){
                request['sort:rec_URL'] = -1;
            }
            
            this.filterRecordList_dbs(request);
    },

    //
    //
    //
    _loadRecordTypesForDb: function(db_ids){
        
        var record = db_ids.getFirstRecord();//this._cachedRecordset_dbs.getById(db_ids[0]);
        
        var sURL  = db_ids.fld(record, 'rec_URL');
        var sDB   = db_ids.fld(record, 'rec_Title');
        
        var options = {
            isdialog: false,
            container: '#panel_rty',
            select_mode: 'select_single',
            database_url:  (sURL+'?db='+sDB),
            
            onselect:function(event, data){
                
                var s = 'Selected ';
                if(data && data.selection)
                for(i in data.selection){
                    if(i>=0)
                        s = s+data.selection[i]+'<br>';
                }
                alert(s);
            }
        };

        this.element.find('#panel_dbs').hide();
        this.element.find('#panel_rty').show();
        
        window.hWin.HEURIST4.ui.showEntityDialog('defRecTypes', options);
        
        
    },
    
    //Called whenever the option() method is called
    //Overriding this is useful if you can defer processor-intensive changes for multiple option change
    _setOptions: function( ) {
        this._superApply( arguments );
    },

    /* 
    * private function 
    * show/hide buttons depends on current login status
    */
    _refresh: function(){

    },
    // 
    // custom, widget-specific, cleanup.
    _destroy: function() {
        // remove generated elements
        if(this.searchForm_dbs) this.searchForm_dbs.remove();
        if(this.recordList_dbs) this.recordList_dbs.remove();

        //if(this.searchForm_rty) this.searchForm_rty.remove();
        //if(this.recordList_rty) this.recordList_rty.remove();
    },
    
    //----------------------
    //
    // listener of action button/menu clicks - central listener for action events
    //
    _onActionListener:function(event, action){
        if(action=='select-and-close'){
             //this._selectAndClose();
             return true;
        } else {
             var recID = 0;
             if(action && action.action){
                 recID =  action.recID;
                 action = action.action;
             }
         }
        return false;
    },

    //
    // DBS: renderer of item for resultlist
    //
    _recordListItemRenderer_dbs:function(recordset, record){

        function fld(fldname){
            return recordset.fld(record, fldname);
        }

        
        var recID = fld('rec_ID');
        var recURL = fld('rec_URL');
        var dbName = fld('rec_Title');
        var recTitle = window.hWin.HEURIST4.util.htmlEscape(fld('rec_ScratchPad'));
        
        /*var splittedURL = recURL.split('?');
        var dbURL = splittedURL[0];
        var matches = recURL.match(/db=([^&]*).*$/);
        var dbName = (matches && matches.length>1)?matches[1]:'';
        //get database and server url
        var recTitle = window.hWin.HEURIST4.util.htmlEscape(fld('rec_Title'));
        */
        
        var rtIcon = window.hWin.HAPI4.getImageUrl('sysDatabases', 0, 'icon');
        var recThumb = window.hWin.HAPI4.getImageUrl('sysDatabases', recID, 'thumb');
        
        var html_thumb = '<div class="recTypeThumb" style="background-image: url(&quot;'+recThumb+'&quot;);opacity:1">'
        +'</div>';
        
        var recTitle = '<div class="item" style="width:3em">'+recID+'</div>'
                      +'<div class="item" style="width:15em;'+(recID<1000?'font-weight:bold':'')
                                                        +'">'+dbName+'</div>'
                      +'<div class="item" style="width:30em">'+recTitle+'</div>'
                      +'<div class="item" style="width:20em"><a href="'+recURL+'?db='+dbName+'" target="_blank">'
                        + window.hWin.HEURIST4.util.htmlEscape(recURL)+'</a></div>';
        
        var html = '<div class="recordDiv" id="rd'+recID+'" recid="'+recID+'">'
        + html_thumb
        + '<div class="recordSelector"><input type="checkbox" /></div>'
        + '<div class="recordIcons">' //recid="'+recID+'" bkmk_id="'+bkm_ID+'">'
        +     '<img src="'+window.hWin.HAPI4.baseURL+'hclient/assets/16x16.gif'
        +     '" style="background-image: url(&quot;'+rtIcon+'&quot;);">'
        + '</div>'
        + '<div class="recordTitle" style="left:40px !important">'
        +     recTitle 
        + '</div></div>';
        
       

        return html;
    
    },
    
    //
    // init dialog widget 
    //
    _initDialog: function(){
        
            var options = this.options,
                btn_array = [], 
                position = null,
                    that = this;
            
            if(position==null) position = { my: "center", at: "center", of: window };
            var maxw = (window.hWin?window.hWin.innerWidth:window.innerWidth);
            if(options['width']>maxw) options['width'] = maxw*0.95;
            var maxh = (window.hWin?window.hWin.innerHeight:window.innerHeight);
            if(options['height']>maxh) options['height'] = maxh*0.95;
            
            //this.options.window = window.hWin;
            
            var $dlg = this.element.dialog({
                autoOpen: false ,
                //element: this.element[0],
                height: options['height'],
                width:  options['width'],
                modal:  (options['modal']!==false),
                title: window.hWin.HEURIST4.util.isempty(options['title'])?'':options['title'], //title will be set in  initControls as soon as entity config is loaded
                position: position,
                resizeStop: function( event, ui ) {//fix bug
                    that.element.css({overflow: 'none !important','width':that.element.parent().width()-24 });
                },
                close:function(){
                    $dlg.parent().remove();    
                }
            }); 
            this._as_dialog = $dlg; 
    },
    
    //
    // show itself as popup dialog
    //
    popupDialog: function(){
        if(this.options.isdialog){

            this._as_dialog.dialog("open");
            
            window.hWin.HEURIST4.ui.initDialogHintButtons(this._as_dialog,
                null, //'prefs_'+this._entityName,
                window.hWin.HAPI4.baseURL+'context_help/importStructure.html #content', false);
            
        }
    },
    
    //--------------- WORK WITH LIST
    //
    // listener of onfilter event generated by search
    //
    filterRecordList_dbs: function(request){
        var subset = null;
        if(this._cachedRecordset_dbs){
            subset = this._cachedRecordset_dbs.getSubSetByRequest(request, this.options.entity.fields);
            this.recordList_dbs.resultList('updateResultSet', subset, request);   
        }
        return subset;
    },

});

