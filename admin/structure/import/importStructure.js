/**
* importStructure.js - widget to browse template database, select record type and import it
*
* @package     Heurist academic knowledge management system
* @link        http://HeuristNetwork.org
* @copyright   (C) 2005-2018 University of Sydney
* @author      Artem Osmakov   <artem.osmakov@sydney.edu.au>
* @license     http://www.gnu.org/licenses/gpl-3.0.txt GNU License 3.0
* @version     4.0
*/

/*  
* Licensed under the GNU License, Version 3.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://www.gnu.org/licenses/gpl-3.0.txt
* Unless required by applicable law or agreed to in writing, software distributed under the License is
* distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
* See the License for the specific language governing permissions and limitations under the License.
*/

//  recordList_dbs for database browse = list of records from main index database
//  record type - treeview with individual fields selection

//
// METHODS
//        
//_init - add panels and init ui elements
//_onActionListener - central listener for action events
//_recordListHeaderRenderer  - renderer of header for resultlist
//_recordListItemRenderer    - renderer of item for resultlist
//_recordListGetFullData     - callback function to retrieve full record info (in case we use 2 steps search: ids then list per page)  

//updateRecordList - listener of onresult event generated by searchEtity
//filterRecordList - listener of onfilter event generated by searchEtity. appicable for use_cache only       
//getRecordSet - get subset of current recordset by Ids
    
/*
todo
0. do not current db in list
1. show/hide rectypes that are already in db
2. show/hide fields in tree

3. form structures to add terms, fields, structure, rectype
4. use functions from saveStructureLib

*/

$.widget( "heurist.importStructure", {

    // default options
    options: {
    
        //DIALOG section       
        isdialog: false,  // show as dialog @see  _initDialog(), popupDialog(), closeDialog
        height: 600,
        width:  1100,
        modal:  true,
        title:  'Import structural definitions into current database',
        
        //LIST section 
        pagesize: 200      // page size in resultList 
    },
   
    //cached records hRecordSet for databases
    _cachedRecordset_dbs:null,
    
    _selectedDB:null, //regid of currently selected database
    _selectedRtyID:null,
    
    // the widget's constructor
    _create: function() {
        // prevent double click to select text
        //it prevents inputs in FF this.element.disableSelection();
    }, //end _create
    
    //
    //  load configuration and call _initControls
    //
    _init: function() {

            
        if(this.options.isdialog){  //show this widget as popup dialog
            this._initDialog();
        }
        
        //init layout
        var layout = 
                '<div class="ent_wrapper">'
                        +'<div class="ent_wrapper" id="panel_dbs">'
                        +    '<div class="ent_header searchForm"/>'     
                        +    '<div class="ent_content_full recordList"/>'
                        +'</div>'
                        +'<div class="ent_wrapper" id="panel_rty" style="display:none">'
                        
                            +'<div class="ent_wrapper" id="panel_rty_list">'
                            +'</div>'
                            
                            +'<div class="ent_wrapper" id="panel_rty_tree" style="display:none;top:0;left:321px">'
                            +    '<div class="ent_header rtt-toolbar" style="padding:10px;height:8.6em;border-left:1px lightgray solid">'
                                        +'<div id="btn_close_panel_rty_tree"></div><div id="btn_start_import"></div>'
                                        +'<div class="heurist-helper1" style="padding:4px;">Explore structure of record type to be imported. Grayed out fields are already in current database. Mouse over the field in tree to show a local correspond field</div>'
                            +    '</div>'
                            +    '<div class="ent_content_full rtt-tree" style="top:10.4em"/>'
                            +'</div>'
                            
                        +'</div>'
                +'</div>';
        $(layout).appendTo(this.element);
        
        //find 3 elements searchForm, recordList+recordList_toolbar, editForm+editForm_toolbar
        this.recordList_dbs = this.element.find('#panel_dbs .recordList');
        this.searchForm_dbs = this.element.find('#panel_dbs .searchForm');

        var that = this;
        //init record list for dbs and rty
        this.recordList_dbs
            .resultList({
                       eventbased: false, 
                       isapplication: false, //do not listent global events @todo merge with eventbased
                       multiselect: false,
                       select_mode: 'select_single', // none
                       
                       entityName: 'Records',
                       view_mode: 'list',
                       show_viewmode: false,
                       
                       pagesize: (this.options.pagesize>0) ?this.options.pagesize: 9999999999999,
                       empty_remark: '<div style="padding:1em 0 1em 0">No registered databases found</div>',

                       rendererHeader:  function(){
        sHeader = '<div style="width:62px">Reg#</div><div style="width:23em">Database Name</div>'
                +'<div style="width:31em">Description</div>'
                +'<div style="width:5em">URL</div>';
                            return sHeader;
                       },
                       renderer:
                       function(recordset, record){ 
                                return that._recordListItemRenderer_dbs(recordset, record); 
                       }
            });     
            
        this._on( this.recordList_dbs, {
                        "resultlistonselect": function(event, selected_recs){
                            // show list of record types for selected database
                            that._loadRecordTypesForDb( selected_recs );
                            
                        },
                        "resultlistonaction": this._onActionListener        
        });
              
        //init search panel
        this.searchForm_dbs.load(window.hWin.HAPI4.baseURL
                    +'hclient/widgets/entity/searchSysDatabases.html?t'
                    +window.hWin.HEURIST4.util.random(), 
        function(response, status, xhr){
            
            //init buttons
            that.btn_search_start = that.searchForm_dbs.find('#btn_search_start')
                //.css({'width':'6em'})
                .button({label: window.hWin.HR("Start search"), showLabel:false, 
                        icon:"ui-icon-search", iconPosition:'end'});
                 
                    
            //this is default search field - define it in your instance of html            
            that.input_search = that.searchForm_dbs.find('#input_search');
            
            that._on( that.input_search, { keypress: that.startSearchOnEnterPress });
            that._on( that.btn_search_start, { click: that.startSearch_dbs });            
            
            that.searchForm_dbs.find('#input_search_type_div2').show();
            that.input_search_type = that.searchForm_dbs.find('#input_search_type2');
            that._on(that.input_search_type,  { change:that.startSearch_dbs });
            
            that.input_sort_type = that.searchForm_dbs.find('#input_sort_type');
            that.input_sort_type.val('register');
            that._on(that.input_sort_type,  { change:that.startSearch_dbs });
            
        });
        

//----------------------       
        //show dialog if required 
        if(this.options.isdialog){
            this.popupDialog();
        }
        
        window.hWin.HEURIST4.ui.applyCompetencyLevel(-1, this.element); 

        var that = this;
        
        window.hWin.HEURIST4.msg.bringCoverallToFront(this.element);
        
        window.hWin.HAPI4.EntityMgr.getEntityConfig('records', 
        function(entity){
            that.options.entity = entity;
                        
            //retrieve all template databases from master index server
            var query_request = {remote:'master'};
            window.hWin.HAPI4.RecordMgr.search(query_request, 
                function( response ){
                    window.hWin.HEURIST4.msg.sendCoverallToBack();
                    
                    if(response.status == window.hWin.ResponseStatus.OK){
                        
                        response.data.fields.push('rec_ScratchPad');
                        
                        that._cachedRecordset_dbs = new hRecordSet(response.data);
                        
                        //prepare recordset - extract database name and transfer title to notes
                        that._cachedRecordset_dbs.each(function(recID, record){
                            
                                var recURL  = this.fld(record, 'rec_URL');
                                var recDesc = this.fld(record, 'rec_Title');
                        
                                var splittedURL = recURL.split('?');
                                var dbURL = splittedURL[0];
                                var matches = recURL.match(/db=([^&]*).*$/);
                                var dbName = (matches && matches.length>1)?matches[1]:'';
        
                                this.setFld(record, 'rec_URL', dbURL);
                                this.setFld(record, 'rec_Title', dbName);
                                this.setFld(record, 'rec_ScratchPad', recDesc);
                        });
                        
                        that.startSearch_dbs(); //filterRecordList_dbs({}); 

                    }else{
                        window.hWin.HEURIST4.msg.showMsgErr(response);
                    }
                }
            );
                        
        });
                
        
    },

    //
    //
    //    
    startSearchOnEnterPress: function(e){
        
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            window.hWin.HEURIST4.util.stopEvent(e);
            e.preventDefault();
            this.startSearch_dbs();
        }

    },
    
    startSearch_dbs: function(){
            var request = {};
            
            if(this.input_search.val()!=''){
                request['rec_Title'] = this.input_search.val();
            }
            
            if(this.input_search_type.val()!=''){
                if(this.input_search_type.val()=='curated'){
                    request['rec_ID'] = '<1000';
                }else if(this.input_search_type.val()=='user'){
                    request['rec_ID'] = '>999';
                }
            }
            
            if(this.input_sort_type.val()=='name'){
                request['sort:rec_Title'] = 1;
            }else if(this.input_sort_type.val()=='register'){
                request['sort:rec_ID'] = 1;
            }else  if(this.input_sort_type.val()=='url'){
                request['sort:rec_URL'] = -1;
            }
            
            this.filterRecordList_dbs(request);
    },

    //
    // init manageDefRecTypes widget on panel_rty
    //
    _loadRecordTypesForDb: function(db_ids){

        var that = this;
        var panel_dbs = this.element.find('#panel_dbs');
        var panel_rty = this.element.find('#panel_rty');
        
        var record = db_ids.getFirstRecord();//this._cachedRecordset_dbs.getById(db_ids[0]);
        
        var sDB_ID = db_ids.fld(record, 'rec_ID');
        var sURL  = db_ids.fld(record, 'rec_URL');
        var sDB   = db_ids.fld(record, 'rec_Title');
        
        
        if(this._selectedDB != sDB_ID){
            
            this._selectedDB = sDB_ID;
            
            //TEMP replace all folders to h5-ao to get correct output
            if(sURL.indexOf('http://heurist.sydney.edu.au/')==0){
                sURL = 'http://heurist.sydney.edu.au/h5-ao/'    
            }
            
            var options = {
                isdialog: false,
                container: '#panel_rty_list',
                select_mode: 'select_single',
                
                import_structure:{
                       database: sDB,      //database name
                       databaseURL: sURL,
                       database_url:  (sURL+'?db='+sDB),
                       btn_back_to_databases: function(){
                           
                            that._backToDatabases();
                           
                       }
                },
                
                onselect:function(event, data){
                    
                    //show treeview
                    if(data && data.selection && data.selection.length>0){
                        that._loadRecordTypesTreeView(data.selection[0]);
                    }
                    
                    
                    
                }
            };

            this.element.find('#panel_rty_list').empty();
            window.hWin.HEURIST4.ui.showEntityDialog('defRecTypes', options);
            
        }
        panel_dbs.hide();
        panel_rty.show();
        
        
    },
    
    _backToDatabases: function(){
        this._hideRectypeTree();
        this.element.find('#panel_rty').hide();
        this.element.find('#panel_dbs').show();
    },
    
    _hideRectypeTree: function(){
        this.element.find('#panel_rty_list').css({right:'1px'});
        this.element.find('#panel_rty_tree').hide();
    },
    
    //
    // show treeview with record type structure
    //
    _loadRecordTypesTreeView: function(rtyID){
        
        var panel_rty = this.element.find('#panel_rty_list').css({right:'300px'});
        var panel_rty_structure = this.element.find('#panel_rty_tree')
                .css({left: this.element.find('#panel_rty').width()-300 }).show();
        var that = this;
        
        if( this._selectedRtyID!=rtyID ){
        
            if(this._selectedRtyID==null){
                //first time init
                
                // CLOSE BUTTON
                panel_rty_structure.find('#btn_close_panel_rty_tree')
                    .button({icon: 'ui-icon-circle-close', showLabel:false, label:'Close'})
                    .css({'line-height': '0.9em', float:'right'})
                    .click(function(){
                        that._hideRectypeTree();
                    });
                    
                // START IMPORT 
                panel_rty_structure.find('#btn_start_import')
                    .button({icon: 'ui-icon-carat-1-s', iconPosition:'right', label:'Start Import'})
                    .css({'line-height': '0.9em'})
                    .click(function(){
                        that.startImport();
                    });
                    
            }
                
            this._selectedRtyID = rtyID;
            
            //generate treedata from rectype structure
            var treedata = window.hWin.HEURIST4.dbs.createRectypeStructureTree( window.hWin.HEURIST4.remote, 5, rtyID, 'all' );
            
            treedata[0].expanded = true; //first expanded
            
            //load treeview
            var treediv = this.element.find('.rtt-tree');
            if(!treediv.is(':empty')){
                treediv.fancytree("destroy");
            }
            
            treediv.addClass('tree-facets').fancytree({
                //extensions: ["filter"],
                //            extensions: ["select"],
                checkbox: true,
                selectMode: 3,  // hierarchical multi-selection
                source: treedata,
                beforeSelect: function(event, data){
                    // A node is about to be selected: prevent this, for folder-nodes:
                    if( data.node.hasChildren() ){
                        return false;
                    }
                },
                lazyLoad: function(event, data){
                    var node = data.node;
                    var parentcode = node.data.code; 
                    var rectypes = node.data.rt_ids;
                    
                    var res = window.hWin.HEURIST4.dbs.createRectypeStructureTree( window.hWin.HEURIST4.remote, 5, rectypes, 'all', parentcode );
                    if(res.length>1){
                        data.result = res;
                    }else{
                        data.result = res[0].children;
                    }
                    
                    return data;                                                   
                },
                loadChildren: function(e, data){
                  
//console.log(data);                     
//                        var tree = treediv.fancytree("getTree");
                        data.node.visit(function(node){
                            var lcode = node.data.dtyID_local>0 ?node.data.dtyID_local:node.data.rtyID_local;
                            if(lcode>0){
                                 node.setSelected(true);
                                 node.unselectable = true;
                                 node.extraClasses = 'graytext';
                                 node.tooltip = (window.hWin
                                    .HEURIST4[node.data.dtyID_local>0?'detailtypes':'rectypes'].names[lcode])+' #'+lcode;
                                 //node.unselectableStatus = true;
                            }                     
                            //hide checkbox for all expcet resource
                            if(!(node.data.type=='resource' || 
                                 node.data.type=='relmarker' || 
                                 node.data.type=='rectype'))
                            {
                                node.hideCheckbox = true;    
                            }
                            
                        });
                },
                select: function(e, data) {
                },
                click: function(e, data){
                   if($(e.originalEvent.target).is('span') && data.node.children && data.node.children.length>0){
                       data.node.setExpanded(!data.node.isExpanded());
                       //treediv.find('.fancytree-expander').hide();
                       
                   }else if( data.node.lazy) {
                       data.node.setExpanded( true );
                   }
                },
                dblclick: function(e, data) {
                    data.node.toggleSelected();
                },
                keydown: function(e, data) {
                    if( e.which === 32 ) {
                        data.node.toggleSelected();
                        return false;
                    }
                }
            });

            //check and disable nodes for entities that are already in database
            /*
            var tree = treediv.fancytree("getTree");            
            tree.visit(function(node){
                if(node.data.dtyID_local>0){
                     node.setSelected(true);
                     node.unselectable = true;
                     //node.unselectableStatus = true;
                     if(!node.hasChildren())
                        $(node.li).css('color','green');
                     
                }
            });
            */
            //hide all folder triangles
            //treediv.find('.fancytree-expander').hide();
        
        }
    },
    
    //Called whenever the option() method is called
    //Overriding this is useful if you can defer processor-intensive changes for multiple option change
    _setOptions: function( ) {
        this._superApply( arguments );
    },

    /* 
    * private function 
    * show/hide buttons depends on current login status
    */
    _refresh: function(){

    },
    // 
    // custom, widget-specific, cleanup.
    _destroy: function() {
        // remove generated elements
        if(this.searchForm_dbs) this.searchForm_dbs.remove();
        if(this.recordList_dbs) this.recordList_dbs.remove();

        //if(this.searchForm_rty) this.searchForm_rty.remove();
        //if(this.recordList_rty) this.recordList_rty.remove();
    },
    
    //----------------------
    //
    // listener of action button/menu clicks - central listener for action events
    //
    _onActionListener:function(event, action){
        if(action=='select-and-close'){
             //this._selectAndClose();
             return true;
        } else {
             var recID = 0;
             if(action && action.action){
                 recID =  action.recID;
                 action = action.action;
             }
         }
        return false;
    },

    //
    // DBS: renderer of item for resultlist
    //
    _recordListItemRenderer_dbs:function(recordset, record){

        function fld(fldname){
            return recordset.fld(record, fldname);
        }

        
        var recID = fld('rec_ID');
        var recURL = fld('rec_URL');
        var dbName = fld('rec_Title');
        var recTitle = window.hWin.HEURIST4.util.htmlEscape(fld('rec_ScratchPad'));
        
        /*var splittedURL = recURL.split('?');
        var dbURL = splittedURL[0];
        var matches = recURL.match(/db=([^&]*).*$/);
        var dbName = (matches && matches.length>1)?matches[1]:'';
        //get database and server url
        var recTitle = window.hWin.HEURIST4.util.htmlEscape(fld('rec_Title'));
        */
        
        var rtIcon = window.hWin.HAPI4.getImageUrl('sysDatabases', 0, 'icon');
        var recThumb = window.hWin.HAPI4.getImageUrl('sysDatabases', recID, 'thumb');
        
        var html_thumb = '<div class="recTypeThumb" style="background-image: url(&quot;'+recThumb+'&quot;);opacity:1">'
        +'</div>';
        
        var recTitle = '<div class="item" style="width:3em">'+recID+'</div>'
                      +'<div class="item" style="width:25em;'+(recID<1000?'font-weight:bold':'')
                                                        +'">'+dbName+'</div>'
                      +'<div class="item" style="width:35em" title="'+recTitle+'">'+recTitle+'</div>'
                      +'<div class="item" style="width:20em;padding-left:4px"><a href="'
                                +recURL+'?db='+dbName+'" target="_blank">'
                        + window.hWin.HEURIST4.util.htmlEscape(recURL)+'</a></div>';
        
        var html = '<div class="recordDiv" id="rd'+recID+'" recid="'+recID+'">'
        + html_thumb
        + '<div class="recordSelector"><input type="checkbox" /></div>'
        + '<div class="recordIcons">' //recid="'+recID+'" bkmk_id="'+bkm_ID+'">'
        +     '<img src="'+window.hWin.HAPI4.baseURL+'hclient/assets/16x16.gif'
        +     '" style="background-image: url(&quot;'+rtIcon+'&quot;);">'
        + '</div>'
        + '<div class="recordTitle" style="left:40px !important">'
        +     recTitle 
        + '</div></div>';
        
       

        return html;
    
    },
    
    //
    // init dialog widget 
    //
    _initDialog: function(){
        
            var options = this.options,
                btn_array = [], 
                position = null,
                    that = this;
            
            if(position==null) position = { my: "center", at: "center", of: window };
            var maxw = (window.hWin?window.hWin.innerWidth:window.innerWidth);
            if(options['width']>maxw) options['width'] = maxw*0.95;
            var maxh = (window.hWin?window.hWin.innerHeight:window.innerHeight);
            if(options['height']>maxh) options['height'] = maxh*0.95;
            
            //this.options.window = window.hWin;
            this.element.addClass('ui-heurist-bg-light');
            
            var $dlg = this.element.dialog({
                autoOpen: false ,
                //element: this.element[0],
                height: options['height'],
                width:  options['width'],
                modal:  (options['modal']!==false),
                title: window.hWin.HEURIST4.util.isempty(options['title'])?'':options['title'], //title will be set in  initControls as soon as entity config is loaded
                position: position,
                resizeStop: function( event, ui ) {//fix bug
                    that.element.css({overflow: 'none !important','width':that.element.parent().width()-24 });
                },
                close:function(){
                    $dlg.parent().remove(); 
                    that.element.remove();
                }
            }); 
            this._as_dialog = $dlg; 
    },
    
    //
    // show itself as popup dialog
    //
    popupDialog: function(){
        if(this.options.isdialog){

            this._as_dialog.dialog("open");
            
            window.hWin.HEURIST4.ui.initDialogHintButtons(this._as_dialog,
                null, //'prefs_'+this._entityName,
                window.hWin.HAPI4.baseURL+'context_help/importStructure.html #content', false);
            
        }
    },
    
    //--------------- WORK WITH LIST
    //
    // listener of onfilter event generated by search
    //
    filterRecordList_dbs: function(request){
        var subset = null;
        if(this._cachedRecordset_dbs){
            subset = this._cachedRecordset_dbs.getSubSetByRequest(request, this.options.entity.fields);
            this.recordList_dbs.resultList('updateResultSet', subset, request);   
        }
        return subset;
    },
    
    
    //
    //
    //
    startImport: function(){
        
        this._hideRectypeTree();
        
        var rtyCode = this._selectedDB + '-' + this._selectedRtyID;
        
        var request = {code:rtyCode, db:window.hWin.HAPI4.database}
        
        var url = window.hWin.HAPI4.baseURL + 'admin/structure/import/importRectype.php';
        
        var that = this;
        
        window.hWin.HEURIST4.msg.bringCoverallToFront(this.element);
        
        window.hWin.HEURIST4.util.sendRequest(url, request, null, function(response){    

            window.hWin.HEURIST4.msg.sendCoverallToBack(); 

            if(response.status == window.hWin.ResponseStatus.OK){
                
                if(response.data.rectypes) window.hWin.HEURIST4.rectypes = response.data.rectypes;
                if(response.data.detailtypes) window.hWin.HEURIST4.detailtypes = response.data.detailtypes;
                if(response.data.terms) window.hWin.HEURIST4.terms = response.data.terms;
                
                var report = ''
                var theader = '<table style="padding: 5px;font-size: 1em;">'
                +'<tr><th colspan="2">Source</th><th>Concept ID</th><th colspan="3">Target</th></tr>'
                +'<tr><th>ID</th><th>Name</th><th>&nbsp;</th><th>ID</th><th>Name</th><th></th></tr>';
                
                if(response.report.rectypes) {
            report = report + '<h3>Record types</h3>'+theader
                + response.report.rectypes
                + '</table>';
                }
                
                if(response.report.detailtypes) {
            report = report + '<h3>Field types</h3>'+theader
                + response.report.detailtypes
                + '</table>';
                }
                
                if(response.report.terms) {
            report = report + '<h3>Terms</h3>'+theader
                + response.report.terms
                + '</table>';
                }
               
                if(report!=''){ 
                    report = '<div style="font-size:0.9em;"><h2>Record type and associated structures imported</h2>'+report+'</div>';
                    window.hWin.HEURIST4.msg.showMsgDlg(report);
                }else{
                    report = 'Nothing imported. '+
                    'Record types (and associated strucures) you selected to be imported are in this database already';
                }
                window.hWin.HEURIST4.msg.showMsgDlg(report);
                
            }else{
                window.hWin.HEURIST4.msg.showMsgErr(response);
            }
            
        });
        
    }
    
});
