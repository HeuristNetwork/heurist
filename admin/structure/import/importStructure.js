/**
* manageEntity.js - BASE widget
*
* @package     Heurist academic knowledge management system
* @link        http://HeuristNetwork.org
* @copyright   (C) 2005-2018 University of Sydney
* @author      Artem Osmakov   <artem.osmakov@sydney.edu.au>
* @license     http://www.gnu.org/licenses/gpl-3.0.txt GNU License 3.0
* @version     4.0
*/

/*  
* Licensed under the GNU License, Version 3.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://www.gnu.org/licenses/gpl-3.0.txt
* Unless required by applicable law or agreed to in writing, software distributed under the License is
* distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
* See the License for the specific language governing permissions and limitations under the License.
*/

//
// METHODS
//        
//_init - add panels and init ui elements
//_onActionListener - central listener for action events
//_recordListHeaderRenderer  - renderer of header for resultlist
//_recordListItemRenderer    - renderer of item for resultlist
//_recordListGetFullData     - callback function to retrieve full record info (in case we use 2 steps search: ids then list per page)  

//updateRecordList - listener of onresult event generated by searchEtity
//filterRecordList - listener of onfilter event generated by searchEtity. appicable for use_cache only       
//getRecordSet - get subset of current recordset by Ids
    


$.widget( "heurist.importStructure", {

    // default options
    options: {
    
        //DIALOG section       
        isdialog: false,  // show as dialog @see  _initDialog(), popupDialog(), closeDialog
        height: 400,
        width:  760,
        modal:  true,
        title:  '',
        
        //LIST section 
        pagesize: 200      // page size in resultList 
    },
   
    //cached records hRecordSet for databases
    _cachedRecordset_dbs:null,
    
    //cached records hRecordSet for record types
    _cachedRecordset_rty:null,
    
    // the widget's constructor
    _create: function() {
        // prevent double click to select text
        //it prevents inputs in FF this.element.disableSelection();
    }, //end _create
    
    //
    //  load configuration and call _initControls
    //
    _init: function() {

            
        if(this.options.isdialog){  //show this widget as popup dialog
            this._initDialog();
        }
        
        //init layout
        var layout = 
                '<div class="ent_wrapper">'
                        +'<div class="ent_wrapper" id="panel_dbs">'
                        +    '<div class="ent_header searchForm"/>'     
                        +    '<div class="ent_content_full recordList"/>'
                        +'</div>'
                        +'<div class="ent_wrapper" id="panel_rty" style="display:none">'
                        +    '<div class="ent_header searchForm"/>'
                        +    '<div class="ent_content_full recordList"/>'
                        +'</div>'
                +'</div>';
        $(layout).appendTo(this.element);
        
        //find 3 elements searchForm, recordList+recordList_toolbar, editForm+editForm_toolbar
        this.recordList_dbs = this.element.find('#panel_dbs .recordList');
        this.searchForm_dbs = this.element.find('#panel_dbs .searchForm');

        this.recordList_rty = this.element.find('#panel_rty .recordList');
        this.searchForm_rty = this.element.find('#panel_rty .searchForm');

        var that = this;
        //init record list for dbs and rty
        this.recordList_dbs
            .resultList({
                       eventbased: false, 
                       isapplication: false, //do not listent global events @todo merge with eventbased
                       multiselect: false,
                       select_mode: 'select_single', // none
                       
                       entityName: 'Records',
                       view_mode: 'list',
                       
                       pagesize: (this.options.pagesize>0) ?this.options.pagesize: 9999999999999,
                       empty_remark: '<div style="padding:1em 0 1em 0">No registered databases found</div>',

                       renderer: function(recordset, record){ 
                                return that._recordListItemRenderer_dbs(recordset, record); 
                       },
                       rendererHeader: function(){
                                return that._recordListHeaderRenderer_dbs();
                       }
            });     

        this._on( this.recordList_dbs, {
                        "resultlistonselect": function(event, selected_recs){
                            // show list of reccord types
                        },
                        "resultlistonaction": this._onActionListener        
        });
                        
        //init search panel
        
        
        
        if(this.options.isdialog){
            this.popupDialog();
        }
        
        window.hWin.HEURIST4.ui.applyCompetencyLevel(-1, this.element); 
    },

    //Called whenever the option() method is called
    //Overriding this is useful if you can defer processor-intensive changes for multiple option change
    _setOptions: function( ) {
        this._superApply( arguments );
    },

    /* 
    * private function 
    * show/hide buttons depends on current login status
    */
    _refresh: function(){

    },
    // 
    // custom, widget-specific, cleanup.
    _destroy: function() {
        // remove generated elements
        if(this.searchForm_dbs) this.searchForm_dbs.remove();
        if(this.recordList_dbs) this.recordList_dbs.remove();

        if(this.searchForm_rty) this.searchForm_rty.remove();
        if(this.recordList_rty) this.recordList_rty.remove();
    },
    
    //----------------------
    //
    // listener of action button/menu clicks - central listener for action events
    //
    _onActionListener:function(event, action){
        if(action=='select-and-close'){
             //this._selectAndClose();
             return true;
        } else {
             var recID = 0;
             if(action && action.action){
                 recID =  action.recID;
                 action = action.action;
             }
         }
        return false;
    },
    
    //
    // DBS: custom renderer for resultList header
    //
    _recordListHeaderRenderer_dbs:function(){
        //TO EXTEND        
        return '';
    },
    
    //
    // DBS: renderer of item for resultlist
    //
    _recordListItemRenderer_dbs:function(recordset, record){
        //TO EXTEND        
        return 'implement _recordListItemRenderer';
    },

    
    //
    // RTY: custom renderer for resultList header
    //
    _recordListHeaderRenderer_rty:function(){
        //TO EXTEND        
        return '';
    },
    
    //
    // RTY: renderer of item for resultlist
    //
    _recordListItemRenderer_rty:function(recordset, record){
        //TO EXTEND        
        return 'implement _recordListItemRenderer';
    },
    
    //
    // init dialog widget 
    //
    _initDialog: function(){
        
            var options = this.options,
                btn_array = [], 
                position = null,
                    that = this;
            
            if(position==null) position = { my: "center", at: "center", of: window };
            var maxw = (window.hWin?window.hWin.innerWidth:window.innerWidth);
            if(options['width']>maxw) options['width'] = maxw*0.95;
            var maxh = (window.hWin?window.hWin.innerHeight:window.innerHeight);
            if(options['height']>maxh) options['height'] = maxh*0.95;
            
            //this.options.window = window.hWin;
            
            var $dlg = this.element.dialog({
                autoOpen: false ,
                //element: this.element[0],
                height: options['height'],
                width:  options['width'],
                modal:  (options['modal']!==false),
                title: window.hWin.HEURIST4.util.isempty(options['title'])?'':options['title'], //title will be set in  initControls as soon as entity config is loaded
                position: position,
                resizeStop: function( event, ui ) {//fix bug
                    that.element.css({overflow: 'none !important','width':that.element.parent().width()-24 });
                },
                close:function(){
                    $dlg.parent().remove();    
                }
            }); 
            this._as_dialog = $dlg; 
    },
    
    //
    // show itself as popup dialog
    //
    popupDialog: function(){
        if(this.options.isdialog){

            this._as_dialog.dialog("open");
            
            window.hWin.HEURIST4.ui.initDialogHintButtons(this._as_dialog,
                null, //'prefs_'+this._entityName,
                window.hWin.HAPI4.baseURL+'context_help/importStructure.html #content', false);
            
        }
    },
    
    //--------------- WORK WITH LIST
    //
    // listener of onresult event generated by search
    //
    updateRecordList: function( event, data ){
        if (data){
            this._cachedRecordset_dbs = data.recordset;
        }
    },

    //
    // listener of onfilter event generated by search
    //
    filterRecordList: function(event, request){
        var subset = null;
        if(this._cachedRecordset){
            subset = this._cachedRecordset.getSubSetByRequest(request, this.options.entity.fields);
            this.recordList.resultList('updateResultSet', subset, request);   
        }
        return subset;
    },
    
});

