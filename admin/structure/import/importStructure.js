/**
* importStructure.js - widget to browse template database, select record type and import it
*
* @package     Heurist academic knowledge management system
* @link        https://HeuristNetwork.org
* @copyright   (C) 2005-2023 University of Sydney
* @author      Artem Osmakov   <artem.osmakov@sydney.edu.au>
* @license     https://www.gnu.org/licenses/gpl-3.0.txt GNU License 3.0
* @version     4.0
*/

/*  
* Licensed under the GNU License, Version 3.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at https://www.gnu.org/licenses/gpl-3.0.txt
* Unless required by applicable law or agreed to in writing, software distributed under the License is
* distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied
* See the License for the specific language governing permissions and limitations under the License.
*/

//  recordList_dbs for database browse = list of records from main index database
//  record type - treeview with individual fields selection

//
// METHODS
//        
//_init - add panels and init ui elements
//_onActionListener - central listener for action events
//_recordListHeaderRenderer  - renderer of header for resultlist
//_recordListItemRenderer    - renderer of item for resultlist
//_recordListGetFullData     - callback function to retrieve full record info (in case we use 2 steps search: ids then list per page)  

//updateRecordList - listener of onresult event generated by searchEtity
//filterRecordList - listener of onfilter event generated by searchEtity. appicable for use_cache only       
//getRecordSet - get subset of current recordset by Ids

// startImport - MAIN  server side controller/sys_structure.php
/*
todo
0. do not current db in list
1. show/hide rectypes that are already in db
2. show/hide fields in tree

3. form structures to add terms, fields, structure, rectype
4. use functions from saveStructureLib

*/

$.widget( "heurist.importStructure", {

    // default options
    options: {

        //DIALOG section       
        isdialog: false,  // show as dialog @see  _initDialog(), popupDialog(), closeDialog
        height: 600,
        width:  1100,
        modal:  true,
        title:  'Import definitions into current database',
        source_database_id: 0,  //predefined database id ( skip database list selection )

        //LIST section 
        pagesize: 2000,      // page size in resultList 

        onClose:null
    },

    //cached records hRecordSet for databases
    _cachedRecordset_dbs:null,

    _is_rename_target: false,
    _selectedDB:null, //regid of currently selected database

    _init_local_defs_once:true,

    // the widget's constructor
    _create: function() {
        // prevent double click to select text
        //it prevents inputs in FF this.element.disableSelection();
    }, //end _create

    //
    //  load configuration and call _initControls
    //
    _init: function() {

        var that = this;  

        if(this.options.isdialog){  //show this widget as popup dialog
            this._initDialog();
        }

        var layout, sTop = '0';
        if(this.options.innerTitle){
            layout = ('<div class="ui-heurist-header">'+this.options['title']+'</div>');
            sTop = '38px';
        }
        
        this._selectedDB = null;
        this._init_local_defs_once = true;
        
        //init layout
        layout = layout + 
        '<div class="ent_wrapper" style="top:'+sTop+'">' //;min-width:1000px
        
        //1. database selector
        +'<div class="ent_wrapper" id="panel_dbs">'
        +    '<div class="ent_header searchForm"/>'     
        +    '<div class="ent_content_full recordList"/>'
        +'</div>'
        
        //2. List of record types to be imported
        +'<div class="ent_wrapper" id="panel_defs" style="display:none;margin-left:15px;">'

        +'<div class="ent_header" style="padding:4px;">'
        +'<div style="position:absolute;right:225px;left:0">' //450px
        +'<h4  style="margin:0;padding:4 0 0 4" id="h_source"></h4>'     
        +'<div id="btn_back_to_databases" style="position:absolute;right:30px;top:0px;z-index:10"/>'
        +'</div>'

        //+'<div style="border-left:1px solid lightgray;position:absolute;right:225px;width:224px;height:2.8em">'
        //     +'<h4 style="margin:0;padding:4 0 0 4">Entity to be imported</h4>'
        //+'</div>'
        +'<div style="border-left:1px solid lightgray;position:absolute;right:0px;width:223px;height:2.8em;">'
        +'<h4 style="margin:0;padding:4 0 0 4">Current entities in database</h4>'
        +'</div>'
        +'</div>'

        +'<div class="ent_wrapper" id="search_elements" style="top:2.8em;right:225px;border-right:1px solid lightgray;">'
            +'<label> All Find<input id="search_names" class="text ui-widget-content ui-corner-all" style="width: 250px; margin-right:15px;margin-left:10px;"></label>' // general search
            +'<label> Show All<input id="show_all" class="text ui-widget-content ui-corner-all" style="margin-left:10px;vertical-align:-2px;" type="checkbox"></label>' // show all
        +'</div>'

        //left - source                                
        +'<div class="ent_wrapper" id="entity_wrapper" style="top:6.8em;right:225px;border-right:1px solid lightgray;">' //450px
            + '<ul>'
                + '<li><a href="#rty_container">Record / entity types</a></li>'
                + '<li><a href="#dty_container">Individual fields</a></li>'
                + '<li><a href="#trm_container">Individual vocabularies</a></li>'
            + '</ul>'
            + '<div id="trm_container" style="background:transparent;">'
                + '<div class="ui-heurist-bg-light" style="padding:5px 0px 0px 15px;">&#10003; shows terms already in database</div>'
                + '<div class="ent_content_full" id="panel_trm_list" style="position:relative;top:0px;height:97.25%;"></div>'
            + '</div>'
            + '<div id="dty_container" style="background:transparent;">'
                + '<div class="ent_content_full" id="panel_dty_list" style="position:relative;top:0px;height:100%;"></div>'
            + '</div>'
            + '<div id="rty_container"style="background:transparent;">'
                + '<div class="ent_content_full" id="panel_rty_list" style="position:relative;top:0px;height:100%;"></div>'
            + '</div>'
        +'</div>'

        //target
        +'<div id="panel_def_list_target" '
        +'style="position:absolute; top:2.8em;bottom:0;right:0px; overflow:hidden;width:225px;">'
        +'<select id="select_rty_list_target" size="500" style="width:100%;height:100%;border:lightgray 1px solid"/>'
        +'<select id="select_dty_list_target" size="500" style="width:100%;height:100%;border:lightgray 1px solid;display:none;"/>'
        +'<div id="select_trm_list_target" style="width:100%;height:100%;border:lightgray 1px solid;display:none;">'
            + 'Due to the potentially numerous amount of vocabulary and terms,<br>existing local vocabulary and terms are not displayed here'
        +'</div>'
        +'</div>'

        +'</div>'

        //3. report after completion of import
        +'<div class="ent_wrapper" id="panel_report" style="display:none">'
        +    '<div class="ent_content_full" style="bottom:2.8em;top:0;padding:10px"/>'
        +    '<div class="ent_footer" style="text-align:center"><div id="btn_close_panel_report"/></div>'
        +'</div>'

        +'</div>';
        
        $(layout).appendTo(this.element);

        this.panel_defs = this.element.find('#panel_defs');
        this.panel_def_list_target = this.element.find('#panel_def_list_target');

        this.panel_report = this.element.find('#panel_report');
        this.entity_wrapper = this.element.find('#entity_wrapper');
        this.general_search = this.element.find('#search_names');
        this.show_all = this.element.find('#show_all')

        this.panel_rty_list = this.element.find('#panel_rty_list');
        this.panel_dty_list = this.element.find('#panel_dty_list');
        this.panel_trm_list = this.element.find('#panel_trm_list');

        this.select_rty_list_target = this.element.find('#select_rty_list_target');
        this.select_dty_list_target = this.element.find('#select_dty_list_target');
        this.select_trm_list_target = this.element.find('#select_trm_list_target');
        
        this.panel_report.find('#btn_close_panel_report')
        .button({icon: 'ui-icon-carat-1-w', iconPosition:'right', label:'Back to Record Type List'})
        //.css({'line-height': '0.9em'})
        .click(function(){
            that.panel_report.hide();
            that.panel_defs.show();

            //refresh source
            that.panel_rty_list.manageDefRecTypes('getRecordsetFromStructure', window.hWin.HEURIST4.remote.rectypes );
            that.panel_dty_list.manageDefDetailTypes('getRecordsetFromRemote', window.hWin.HEURIST4.remote.detailtypes );
            that.panel_trm_list.manageDefTerms('getRecordsetFromRemote', window.hWin.HEURIST4.remote.terms );

            //refresh target
            window.hWin.HEURIST4.ui.createRectypeSelect(that.select_rty_list_target[0],null,null,true);
            window.hWin.HEURIST4.ui.createRectypeDetailSelect(that.select_dty_list_target[0], null, null, null, {useHtmlSelect: true});

            // refresh filter
            that._filterEntities();
        });

        this.entity_wrapper.tabs({
            heightStyle: 'fill',
            beforeActivate: function(event, ui){ // correct panel height

                let panel = ui.newPanel;
                let parent_height = panel.parent().height();
                panel.height(parent_height - 31);
            },
            activate: function(event, ui){

                let panel = ui.newPanel;
                let entity = panel.attr('id');

                that.panel_def_list_target.find('select').hide();
                window.hWin.HEURIST4.util.setDisabled(that.show_all, false);

                if(entity == 'dty_container'){
                    that.select_dty_list_target.show();

                    that.show_all.prop('checked', false);
                    window.hWin.HEURIST4.util.setDisabled(that.show_all, true);
                }else if(entity == 'trm_container'){
                    that.select_trm_list_target.show();

                    that.show_all.prop('checked', true);
                    window.hWin.HEURIST4.util.setDisabled(that.show_all, true);
                }else{
                    that.select_rty_list_target.show();
                }

                that._filterEntities();
            }
        });

        var ele = this.element.find('#btn_back_to_databases')
        .button({label:'Back to Databases'});
        if(that.options.source_database_id>0){
            ele.hide();
        }else{
            this._on( ele, {'click':this._backToDatabases} );    
        }

        this._on(this.element.find('#show_all'), {
            change: this._filterEntities
        });
        this._on(this.element.find('#search_names'), {
            keyup: this._filterEntities
        })

        //find 3 elements searchForm, recordList+recordList_toolbar, editForm+editForm_toolbar
        this.recordList_dbs = this.element.find('#panel_dbs .recordList');
        this.searchForm_dbs = this.element.find('#panel_dbs .searchForm');

        //init record list for dbs and rty
        this.recordList_dbs
        .resultList({
            eventbased: false, //do not listent global events
            multiselect: false,
            select_mode: 'select_single', // none

            entityName: 'Records',
            view_mode: 'list',
            show_viewmode: false,

            recordDivEvenClass: 'recordDiv_blue',

            pagesize: (this.options.pagesize>0) ?this.options.pagesize: 9999999999999,
            empty_remark: '<div style="padding:1em 0 1em 0">No registered databases found</div>',

            groupByField: 'rec_RecTypeID',
            rendererGroupHeader: function(grp_val){
                if(grp_val==0){
                    //width:100%;
                    return '<div style="border-bottom:1px solid lightgray">'
                    +'<div style="padding:24px 0 4px 40px;"><h2 style="margin:0">Curated templates</h2>'
                    +'<div style="padding-top:4px;"><i>Databases curated by the Heurist team as a source of useful entity types for new databases</i></div></div></div>';
                }else{
                    return '<div style="width:100%;border-bottom:1px solid lightgray">'
                    +'<div style="padding:24px 0 4px 40px;">'
                    +'<h2 style="margin:0">User databases</h2>'
                    +'<div style="padding-top:4px"><i>Databases registered by Heurist users - use with care, look for entity types with good internal documentation</i></div></div></div>';
                }


            },

            rendererHeader:  function(){
                let sHeader = '<div style="width:62px">Reg#</div><div style="width:23em">Database Name</div>'
                +'<div style="width:2em">&nbsp;</div>'
                +'<div style="width:52em">Description</div>';
                //+'<div style="width:3em">URL</div>';
                return sHeader;
            },
            renderer:
            function(recordset, record){ 
                return that._recordListItemRenderer_dbs(recordset, record); 
            }
        });     

        this._on( this.recordList_dbs, {
            "resultlistonselect": function(event, selected_recs){
                // show list of record types for selected database
                that._loadDefinitionsForDb( selected_recs );

            },
            "resultlistonaction": this._onActionListener        
        });

        //help text
        $('<div>')
        .text('Please select a database in the list below to see entity (record) '
            +'types which you might wish to import. Rollover description for full details.')
        .addClass('heurist-helper1')
        .css({padding:'7px 30px'})
        .appendTo(this.recordList_dbs.find('.div-result-list-toolbar'));



        //init search panel
        this.searchForm_dbs.load(window.hWin.HAPI4.baseURL
            +'hclient/widgets/entity/searchSysDatabases.html?t='
            +window.hWin.HEURIST4.util.random(), 
            function(response, status, xhr){

                //init buttons
                that.btn_search_start = that.searchForm_dbs.find('#btn_search_start')
                .show()
                //.css({'width':'6em'})
                .button({label: window.hWin.HR("Start search"), showLabel:false, 
                    icon:"ui-icon-search", iconPosition:'end'});


                //this is default search field - define it in your instance of html            
                that.input_search = that.searchForm_dbs.find('.input_search');

                that._on( that.input_search, { keypress: that.startSearchOnEnterPress });
                //that._on( this.input_search,  { keyup:this.startSearch_dbs });
                that._on( that.btn_search_start, { click: that.startSearch_dbs });            

                //that.searchForm_dbs.find('#input_search_type_div2').show();
                that.input_search_type = that.searchForm_dbs.find('#input_search_type2');
                that._on(that.input_search_type,  { change:that.startSearch_dbs });

                that.input_sort_type = that.searchForm_dbs.find('#input_sort_type');
                that.input_sort_type.val('register');
                that._on(that.input_sort_type,  { change:that.startSearch_dbs });

        });


        //----------------------       
        var that = this;

        window.hWin.HEURIST4.msg.bringCoverallToFront(this.element);

        window.hWin.HAPI4.EntityMgr.getEntityConfig('records', 
            function(entity){
                that.options.entity = entity;

                //retrieve all template databases from master index server
                var query_request = {remote:'master'};
                if(that.options.source_database_id>0){
                    query_request['q'] = 'ids:'+that.options.source_database_id;
                }
                query_request['detail'] = '398'; //Allow Clone?  @todo - concept code

                window.hWin.HAPI4.RecordMgr.search(query_request, 
                    function( response ){

                        if(response.status == window.hWin.ResponseStatus.OK){

                            response.data.fields.push('rec_ScratchPad');
                            response.data.fields.push('rec_AllowClone');
                            var clone_recs = {};

                            that._cachedRecordset_dbs = new hRecordSet(response.data);

                            //prepare recordset - extract database name and transfer title to notes
                            that._cachedRecordset_dbs.each(function(recID, record){

                                var recURL  = this.fld(record, 'rec_URL');
                                var recDesc = this.fld(record, 'rec_Title');
                                var isAllowClone = ( this.fld(record, 398)!=6023 )?1:0; //@todo - concept code
                                var dbURL = '';
                                var dbName = 'Broken registration (Db URL is not defined)';
                                
                                if(recURL){
                                    var splittedURL = recURL.split('?');
                                    if(splittedURL && splittedURL.length>0){
                                        dbURL = splittedURL[0];
                                        var matches = recURL.match(/db=([^&]*).*$/);
                                        dbName = (matches && matches.length>1)?matches[1]:'';

                                        if(isAllowClone === 1 && recID < 1000){ // need to check that the DB is on current server
                                            clone_recs[recID] = dbName;
                                        }
                                    }
                                }
                                var url_Error = this.fld(record, 'rec_URLErrorMessage');
                                if( !window.hWin.HEURIST4.util.isempty( url_Error ) ){
//DEBUG console.log(url_Error);                                    
                                    dbName = dbName + ' (unavailable)';
                                    dbURL = '';
                                }
                                
                                this.setFld(record, 'rec_URL', dbURL);
                                this.setFld(record, 'rec_Title', dbName);
                                this.setFld(record, 'rec_ScratchPad', recDesc);
                                this.setFld(record, 'rec_RecTypeID', recID<1000?0:1);
                                this.setFld(record, 'rec_AllowClone', isAllowClone);                                    
                            });

                            window.hWin.HAPI4.SystemMgr.check_for_databases(clone_recs, (check_response) => {

                                window.hWin.HEURIST4.msg.sendCoverallToBack();

                                $.each(clone_recs, (rec_ID, db_name) => {
                                    that._cachedRecordset_dbs.setFldById(rec_ID, 'rec_AllowClone', check_response.data && check_response.data[rec_ID] == 1);
                                });

                                if(that.options.source_database_id>0){
                                    var selected_recs = that._cachedRecordset_dbs.getSubSetByIds( [that.options.source_database_id] );
                                    that._loadDefinitionsForDb( selected_recs );
                                }else{
                                    that.startSearch_dbs(); //filterRecordList_dbs({}); 
                                }
                            });

                        }else{
                            window.hWin.HEURIST4.msg.sendCoverallToBack();
                            window.hWin.HEURIST4.msg.showMsgErr(response);
                        }
                    }
                );

        });

        //----------------------------                
        //show dialog if required 
        if(this.options.isdialog){
            this.popupDialog();
            this._fixWidth();
        }

        window.hWin.HEURIST4.ui.applyCompetencyLevel(-1, this.element); 

    },

    //
    //
    //    
    startSearchOnEnterPress: function(e){

        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            window.hWin.HEURIST4.util.stopEvent(e);
            e.preventDefault();
            this.startSearch_dbs();
        }

    },

    startSearch_dbs: function(){
        var request = {};
        
        if(!this.input_search) return;

        if(this.input_search.val()!=''){
            request['rec_Title'] = this.input_search.val();
        }

        if(this.input_search_type.val()!=''){
            if(this.input_search_type.val()=='curated'){
                request['rec_ID'] = '<1000';
            }else if(this.input_search_type.val()=='user'){
                request['rec_ID'] = '>999';
            }
        }

        if(window.hWin.HAPI4.sysinfo['db_registeredid']>0){
            request['rec_ID'] = ('!='+window.hWin.HAPI4.sysinfo['db_registeredid']);    
        }

        if(this.input_sort_type.val()=='name'){
            request['sort:rec_Title'] = 1;
        }else if(this.input_sort_type.val()=='register'){
            request['sort:rec_ID'] = 1;
        }else  if(this.input_sort_type.val()=='url'){
            request['sort:rec_URL'] = -1;
        }

        this._selectedDB = null;
        
        this.filterRecordList_dbs(request);
    },

    //
    // init manageDefRecTypes, manageDefDetailTypes, and manageDefTerms widgets on individual panels
    //
    _loadDefinitionsForDb: function(db_ids, skip_pass){

        var that = this;
        var panel_dbs = this.element.find('#panel_dbs');

        var record = db_ids.getFirstRecord();//this._cachedRecordset_dbs.getById(db_ids[0]);

        var sDB_ID = db_ids.fld(record, 'rec_ID');
        var sURL  = db_ids.fld(record, 'rec_URL');
        var sDB   = db_ids.fld(record, 'rec_Title');
        
        if(!sURL) return; //missed

        if(this._selectedDB != sDB_ID){
            
            if(sDB_ID==99 && skip_pass!==true){ //special case - password protect db 99 - heurist construction site
                window.hWin.HAPI4.SystemMgr.verify_credentials( 
                    function(){that._loadDefinitionsForDb( db_ids, true )},1,'ServerFunctions'); //db admin and pwd protected
               return;     
            }

            this._selectedDB = sDB_ID;

            this.element.find('#h_source').text('Entities available in '+sDB_ID+':'+sDB);

            var rty_options = {
                isdialog: false,
                container: '#panel_rty_list',
                select_mode: 'select_single',
                groupsPresentation: 'none',

                simpleSearch: true,

                import_structure:{
                    database: sDB,      //database name
                    databaseURL: sURL,
                    database_url:  (sURL+'?db='+sDB),
                    load_detailstypes: false  // will be loaded later
                },

                onaction:function(event, action){

                    var recID;     
                    if(action && action.action){
                        recID =  action.recID;
                        action = action.action;
                    }
                    if(recID>0){
                        if(action=='expand'){
                            window.hWin.HEURIST4.remote._selectedRtyID
                            = (window.hWin.HEURIST4.remote._selectedRtyID == recID)?null:recID;
                            that.panel_rty_list.manageDefRecTypes('refreshRecordList');                     
                        }else if(action=='import'){

                            var $dlg;
                            var msg = "If you proceed with download, Heurist will download three types of structural information:<br>"
                                + "<ol>"
                                + "<li>the selected record type, any fields, and vocabularies that are not yet in the database.</li>"
                                + "<li>any unrecognised record types (and their fields and vocabularies) connected to the selected record type.</li>"
                                + "<li>"
                                    + "additional fields and vocabularies defined for record types already in your database which are connected<br>"
                                    + "to any of the record types above (the fields will be added to the end of the record type and may be removed or<br>"
                                    + "customised as desired; they will have no effect on existing data)."
                                + "</li>"
                                + "</ol>";
                                
                            msg =  msg + '<p style="font-size:smaller">'
+'<label><input type="checkbox" id="rename_target_entities"/>&nbsp;Check this box</label> '
+' if you wish the record type names, field names and description, and term '
+' labels to be replaced by the names and labels being imported. Use with care as this can overwrite existing '
+'customisation with names which may be quite different and out-of-context with existing data. '
+'If this is not a new database, we suggest cancelling and making a clone first (please' 
+' delete the clone once you are happy with the result of the import).</p>';

                            var btns = {};

                            btns['Proceed'] = function(){
                                
                                var is_rename = $dlg.find('#rename_target_entities').is(':checked');
                                that._is_rename_target = is_rename;
                                if(is_rename){
                                                            
                                    var $dlg2, btn2 = {};
                                    btn2['Yes, overwrite'] = function(){
                                        $dlg2.dialog('close');
                                        $dlg.dialog('close');

                                        that.startImport(recID, 'rectype');
                                    };
                                    btn2['Get me out of here'] = function(){
                                        $dlg2.dialog('close');
                                    };
                                                            
                                                            
                                    $dlg2 = window.hWin.HEURIST4.msg.showMsgDlg(
'Are you sure you want to overwrite existing record type names, field names and term labels?', 
                                                btn2, {title: 'Warning'},
                                                {default_palette_class: 'ui-heurist-design', 
                                                 //dialogId: 'dialog-common-messages2'
                                                }
                                                );
                                }else{
                                    $dlg.dialog('close');

                                    that.startImport(recID, 'rectype');
                                }
                                
                            };
                            btns['Cancel'] = function(){
                                $dlg.dialog('close');
                            }

                            $dlg = window.hWin.HEURIST4.msg.showMsgDlg(msg, btns, 
                                {title: 'Downloading structure', yes:'Proceed', no:'Cancel'}, 
                                {default_palette_class: 'ui-heurist-design'}
                            );  
                            
                        }
                    }

                },

                recordList:{
                    show_toolbar: false,
                    pagesize: 4999, 
                    view_mode:'list',
                    simpleSearch:true,
                    groupByField:'rty_RecTypeGroupID',
                    groupOnlyOneVisible: true,
                    groupByCss:'0 1.5em',
                    rendererGroupHeader: function(grp_val, is_expanded){

                        var rectypes = window.hWin.HEURIST4.remote.rectypes;
                        var idx = rectypes.groups.groupIDToIndex[grp_val];

                        return rectypes.groups[idx]?('<div data-grp="'+grp_val
                            +'" style="font-size:0.9em;padding:14px 0 4px 0px;border-bottom:1px solid lightgray">'
                            +'<span style="display:inline-block;vertical-align:top;padding-top:15px;font-size:20px;" '
                            +'class="expand_button ui-icon ui-icon-triangle-1-'+(is_expanded?'s':'e')+'"></span>'
                            +'<div style="display:inline-block;width:70%">'
                            +'<h2 style="margin:0">'+grp_val+'  '+rectypes.groups[idx].name+'</h2>' //+grp_val+' '
                            +'<div style="padding-top:4px;"><i>'+rectypes.groups[idx].description+'</i></div></div></div>'):'';
                    },
                    renderer: this._recordtypeListItemRenderer
                }
            };

            this.panel_rty_list.empty();
            
            //open list of record types from the remote database
            window.hWin.HEURIST4.ui.showEntityDialog('defRecTypes', rty_options);

            var dty_options = {
                isdialog: false,
                container: '#panel_dty_list',
                select_mode: 'select_single',
                groupsPresentation: 'none',

                simpleSearch: true,

                import_structure:{
                    database: sDB,      //database name
                    databaseURL: sURL,
                    database_url:  (sURL+'?db='+sDB)
                },

                onselect:function(event, data){
                    //show treeview
                },
                onaction:function(event, action){

                    var recID;     
                    if(action && action.action){
                        recID =  action.recID;
                        action = action.action;
                    }
                    if(recID>0){
                        if(action=='expand'){
                            window.hWin.HEURIST4.remote._selectedDtyID
                            = (window.hWin.HEURIST4.remote._selectedDtyID == recID)?null:recID;
                            that.panel_dty_list.manageDefDetailTypes('refreshRecordList');                     
                        }else if(action=='import'){

                            let idx_Type = window.hWin.HEURIST4.remote.detailtypes.typedefs.fieldNamesToIndex.dty_Type;
                            let record = window.hWin.HEURIST4.remote.detailtypes.typedefs[recID]['commonFields'];

                            var msg = '<p style="font-size:smaller">'
                                +'<label><input type="checkbox" id="rename_target_entities"/>&nbsp;Check this box</label> '
                                +' if you wish the field names and description '
                                +' to be replaced by the names being imported. Use with care as this can overwrite existing '
                                +'customisation with names which may be quite different and out-of-context with existing data. '
                                +'If this is not a new database, we suggest cancelling and making a clone first (please' 
                                +' delete the clone once you are happy with the result of the import).</p>';

                            if(record[idx_Type] == 'resource' || record[idx_Type] == 'enum' || record[idx_Type] == 'relmarker'){

                                let extra = record[idx_Type] == 'resource' ? 'record type(s)' : (record[idx_Type] == 'enum' ? 'term(s)' : 'term(s) and record type(s)')
                                msg = "If you proceed with the download, Heurist will also download missing related " + extra + " for the selected field.<br>" + msg;
                            }

                            var $dlg;

                            var btns = {};

                            btns['Proceed'] = function(){
                                
                                var is_rename = $dlg.find('#rename_target_entities').is(':checked');
                                that._is_rename_target = is_rename;
                                if(is_rename){
                                                            
                                    var $dlg2, btn2 = {};
                                    btn2['Yes, overwrite'] = function(){
                                        $dlg2.dialog('close');
                                        $dlg.dialog('close');

                                        that.startImport(recID, 'detailtype');
                                    };
                                    btn2['Get me out of here'] = function(){
                                        $dlg2.dialog('close');
                                    };
                                                            
                                                            
                                    $dlg2 = window.hWin.HEURIST4.msg.showMsgDlg(
                                        'Are you sure you want to overwrite existing field names?', 
                                        btn2, {title: 'Warning'},
                                        {default_palette_class: 'ui-heurist-design'}
                                    );
                                }else{
                                    $dlg.dialog('close');

                                    that.startImport(recID, 'detailtype');
                                }
                                
                            };
                            btns['Cancel'] = function(){
                                $dlg.dialog('close');
                            }

                            $dlg = window.hWin.HEURIST4.msg.showMsgDlg(msg, btns, 
                                {title: 'Downloading base field', yes:'Proceed', no:'Cancel'}, 
                                {default_palette_class: 'ui-heurist-design'}
                            );  
                            
                        }
                    }

                },

                recordList:{
                    show_toolbar: false,
                    pagesize: 4999, 
                    view_mode:'list',
                    simpleSearch:true,
                    groupByField:'dty_DetailTypeGroupID',
                    groupOnlyOneVisible: true,
                    groupByCss:'0 1.5em',
                    rendererGroupHeader: function(grp_val, is_expanded){

                        var detailtypes = window.hWin.HEURIST4.remote.detailtypes;
                        var idx = detailtypes.groups.groupIDToIndex[grp_val];

                        var output = '';

                        if(detailtypes.groups[idx]){
                            output = '<div data-grp="'+grp_val
                            +'" style="font-size:0.9em;padding:14px 0 4px 0px;border-bottom:1px solid lightgray">'
                            +'<span style="display:inline-block;vertical-align:top;padding-top:15px;font-size:20px;" '
                            +'class="expand_button ui-icon ui-icon-triangle-1-'+(is_expanded?'s':'e')+'"></span>'
                            +'<div style="display:inline-block;width:70%">'
                            +'<h2 style="margin:0">'+grp_val+' '+detailtypes.groups[idx].name+'</h2>'
                            +'<div style="padding-top:4px;"><i>'+detailtypes.groups[idx].description+'</i></div></div></div>';
                        }

                        return output;
                    },
                    renderer: this._detailtypeListItemRenderer
                }
            };

            this.panel_dty_list.empty();
            
            //open list of detail types from the remote database
            window.hWin.HEURIST4.ui.showEntityDialog('defDetailTypes', dty_options);

            var trm_options = {
                isdialog: false,
                container: '#panel_trm_list',
                select_mode: 'select_single',
                groupsPresentation: 'none',
                hide_searchForm: true,

                simpleSearch: true,

                import_structure:{
                    database: sDB,      //database name
                    databaseURL: sURL,
                    database_url:  (sURL+'?db='+sDB)
                },

                onselect:function(event, data){
                    //show treeview
                },
                onaction:function(event, action){

                    var recID;     
                    if(action && action.action){
                        recID =  action.recID;
                        action = action.action;
                    }
                    if(recID>0){
                        if(action=='expand'){
                            window.hWin.HEURIST4.remote._selectedTrmID
                            = (window.hWin.HEURIST4.remote._selectedTrmID == recID)?null:recID;
                            that.panel_trm_list.manageDefTerms('refreshRecordList');                     
                        }else if(action=='import'){

                            var $dlg;
                            var msg = "If you proceed with the download, Heurist will download the selected vocabulary and any child terms within<br>"
                                + "Do you wish to continue?"

                            var btns = {};

                            btns['Proceed'] = function(){

                                that._is_rename_target = false;

                                $dlg.dialog('close');

                                that.startImport(recID, 'term');
                                
                            };
                            btns['Cancel'] = function(){
                                $dlg.dialog('close');
                            }

                            $dlg = window.hWin.HEURIST4.msg.showMsgDlg(msg, btns, 
                                {title: 'Downloading vocabulary', yes:'Proceed', no:'Cancel'}, 
                                {default_palette_class: 'ui-heurist-design'}
                            );  
                            
                        }
                    }

                },

                recordList:{
                    show_toolbar: false,
                    pagesize: 4999, 
                    view_mode:'list',
                    simpleSearch:true,
                    groupByField:'trm_VocabularyGroupID',
                    groupOnlyOneVisible: true,
                    groupByCss:'0 1.5em',
                    rendererGroupHeader: function(grp_val, is_expanded){

                        var terms = window.hWin.HEURIST4.remote.terms;

                        return terms.groups[grp_val]?('<div data-grp="'+grp_val
                            +'" style="font-size:0.9em;padding:14px 0 4px 0px;border-bottom:1px solid lightgray">'
                            +'<span style="display:inline-block;vertical-align:top;padding-top:15px;font-size:20px;" '
                            +'class="expand_button ui-icon ui-icon-triangle-1-'+(is_expanded?'s':'e')+'"></span>'
                            +'<div style="display:inline-block;width:70%">'
                            +'<h2 style="margin:0">'+grp_val+'  '+terms.groups[grp_val].vcg_Name+'</h2>' //+grp_val+' '
                            +'<div style="padding-top:4px;"><i>'+terms.groups[grp_val].vcg_Description+'</i></div></div></div>'):'';
                    },
                    renderer: this._termsListItemRenderer
                }
            };

            this.panel_trm_list.empty();
            
            //open list of vocabularies from the remote database
            window.hWin.HEURIST4.ui.showEntityDialog('defTerms', trm_options);

        }
        panel_dbs.hide();
        this.panel_defs.show();


        if( this._init_local_rty_once ){

            this._init_local_rty_once = false;

            window.hWin.HEURIST4.ui.createRectypeSelect(this.select_rty_list_target[0],null,null,true);
            window.hWin.HEURIST4.ui.createRectypeDetailSelect(that.select_dty_list_target[0], null, null, null, {useHtmlSelect: true});
        }
        

    },

    _backToDatabases: function(){
        this.panel_defs.hide();
        this.element.find('#panel_dbs').show();
    },


    //Called whenever the option() method is called
    //Overriding this is useful if you can defer processor-intensive changes for multiple option change
    _setOptions: function( ) {
        this._superApply( arguments );
    },

    /* 
    * private function 
    * show/hide buttons depends on current login status
    */
    _refresh: function(){

    },
    // 
    // custom, widget-specific, cleanup.
    _destroy: function() {
        // remove generated elements
        if(this.searchForm_dbs) this.searchForm_dbs.remove();
        if(this.recordList_dbs) this.recordList_dbs.remove();

        //if(this.searchForm_rty) this.searchForm_rty.remove();
        //if(this.recordList_rty) this.recordList_rty.remove();
    },

    //----------------------
    //
    // listener of action button/menu clicks - central listener for action events
    //
    _onActionListener:function(event, action){
        if(action=='select-and-close'){
            //this._selectAndClose();
            return true;
        } else {
            var recID = 0;
            if(action && action.action){
                recID =  action.recID;
                action = action.action;
            }

            var record = this._cachedRecordset_dbs.getById(recID);
            var dbName = this._cachedRecordset_dbs.fld(record, 'rec_Title');
            var recURL = this._cachedRecordset_dbs.fld(record, 'rec_URL');

            if(action=='open'){
                
                //show intermediate warn
                window.hWin.HEURIST4.msg.showMsgDlg(
                    'These links are intended only as a shortcut for the owner of this database and '
                    +'would require you to be able to log into the database. '
                    +'Please use download or clone links on the left if you are not the owner of the database.', 
                    function(){ window.open(recURL+'?db='+dbName,'_blank'); }, 
                    {title:'Info',yes:'Proceed',no:'Cancel'});        

            }else if(action=='clone'){

                if(!recURL) return;
                
                var cloneURL = window.hWin.HAPI4.baseURL + 'admin/setup/dboperations/cloneDB.php'
                +'?db='+window.hWin.HAPI4.database
                +'&templatedb='+dbName;

                window.hWin.HEURIST4.msg.showDialog(cloneURL, { width: 800, height: 400, title:'Clone curated template'});
            }

        }
        return false;
    },

    //
    // DBS: renderer of item for resultlist - list of databases
    //
    _recordListItemRenderer_dbs:function(recordset, record){

        function fld(fldname){
            return recordset.fld(record, fldname);
        }

        var recID = fld('rec_ID');
        var recURL = fld('rec_URL');
        var dbName = fld('rec_Title');
        var recAllowClone = fld('rec_AllowClone');
        var recTitle = window.hWin.HEURIST4.util.htmlEscape(fld('rec_ScratchPad'));

        var rtIcon = window.hWin.HAPI4.getImageUrl('sysDatabases', 0, 'icon');
        var recThumb = window.hWin.HAPI4.getImageUrl('sysDatabases', recID, 'thumb');

        var html_thumb = '<div class="recTypeThumb" style="background-image: url(&quot;'+recThumb+'&quot;);opacity:1">'
        +'</div>';
        
        var w = this.recordList_dbs.width()-550;
        if(w<150) w = 150;
        
            var url_Error = fld('rec_URLErrorMessage');
            if(!window.hWin.HEURIST4.util.isempty(url_Error)){
                url_Error = 'The indexed database is currently inaccessible. It returned '
                                +window.hWin.HEURIST4.util.htmlEscape(url_Error);
            }else{
                url_Error = '';
            }
        

        var recTitleContent = '<div class="item" style="width:3em">'+recID+'</div>'
        +'<div class="item" style="width:25em;'+(recID<1000?'font-weight:bold;':'')+ (url_Error?'color:lightgray':'') + '"'
        + ' title="' + url_Error + '"'
        + '>'+dbName+'</div>'
        +'<div class="item" style="width:4em">'
        +((recID<1000 && recAllowClone==1)?'<span data-key="clone" style="cursor:pointer;text-decoration:underline">clone</span>'
            :'')+'</div>'
        +'<div class="item" style="width:'+w+'px"  title="'+recTitle+'">'+recTitle+'</div>';  //  description

        var html = '<div class="recordDiv" id="rd'+recID+'" recid="'+recID+'">'
        + html_thumb
        + '<div class="recordSelector"><input type="checkbox" /></div>'
        + '<div class="recordIcons">' //recid="'+recID+'" bkmk_id="'+bkm_ID+'">'
        +     '<img src="'+window.hWin.HAPI4.baseURL+'hclient/assets/16x16.gif'
        +     '" style="background-image: url(&quot;'+rtIcon+'&quot;);">'
        + '</div>'
        + '<div style="left:40px !important" class="recordTitle">'
        +     recTitleContent 
        + '</div><div class="action-button-container">';
        
        
        var usr_exp_level = window.hWin.HAPI4.get_prefs_def('userCompetencyLevel', 2);
        if(usr_exp_level==0){ //advanced
            html = html
            + '<div title="Click to open database in new window" '
            + 'class="rec_edit_link_ext ui-button action-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" '
            + 'role="button" aria-disabled="false" data-key="open">'
            + '<span class="ui-button-icon-primary ui-icon ui-icon-extlink"/><span class="ui-button-text"/>'
            + '</div>';
        }

        html = html + '</div></div>';

        return html;

    },

    //
    // init dialog widget 
    //
    _initDialog: function(){

        var options = this.options,
        btn_array = [], 
        position = null,
        that = this;


        if(position==null) position = { my: "center", at: "center", of: window };
        var maxw = (window.hWin?window.hWin.innerWidth:window.innerWidth);
        if(options['width']>maxw) options['width'] = maxw*0.95;
        var maxh = (window.hWin?window.hWin.innerHeight:window.innerHeight);
        if(options['height']>maxh) options['height'] = maxh*0.95;

        //this.options.window = window.hWin;
        this.element.addClass('ui-heurist-bg-light');

        var $dlg = this.element.dialog({
            autoOpen: false ,
            //element: this.element[0],
            height: options['height'],
            width:  options['width'],
            modal:  (options['modal']!==false),
            title: window.hWin.HEURIST4.util.isempty(options['title'])?'':options['title'], //title will be set in  initControls as soon as entity config is loaded
            position: position,
            resizeStop: function(){ that._fixWidth(); },
            close:function(){

                if($.isFunction(that.options.onClose)){
                    //that.options.onClose(that._currentEditRecordset);  
                    that.options.onClose.call();
                } 

                $dlg.parent().remove(); 
                that.element.remove();
            }
        }); 
        this._as_dialog = $dlg; 
    },

    //
    // adjust width according to width of parent dialog
    //
    _fixWidth: function() {//fix bug
        var correctWidth = this.element.parent().width()-24;
        this.element.css({overflow: 'none !important','width':correctWidth });

        /*this.panel_rty_list.css({'width': correctWidth/2});
        this.panel_rty_list_target.css({'left': correctWidth/2+1});*/
    },

    //
    // show itself as popup dialog
    //
    popupDialog: function(){
        if(this.options.isdialog){

            this._as_dialog.dialog("open");

            var helpURL = window.hWin.HRes( 'importStructure.html' )+' #content';

            window.hWin.HEURIST4.ui.initDialogHintButtons(this._as_dialog,
                null,
                helpURL, false);

        }
    },

    //--------------- WORK WITH LIST
    //
    // listener of onfilter event generated by search
    //
    filterRecordList_dbs: function(request){
        var subset = null;
        if(this._cachedRecordset_dbs){
            subset = this._cachedRecordset_dbs.getSubSetByRequest(request, this.options.entity.fields);
            this.recordList_dbs.resultList('updateResultSet', subset, request);   
        }
        return subset;
    },


    //
    //  MAIN METHOD
    //
    startImport: function(id, type){

        if(!id || id < 1 || !type){
            return;
        }

        var that = this;

        const style = {'font-size': '16px', 'background-color': '#FFF', 'opacity': 1};
        let msg = 'Downloading structure...<br><br>'
                + 'This may take a couple of minutes if there are a number of record type linked to the one requested.<br>';;

        if(type == 'detailtype'){

            msg = 'Downloading base field...<br><br>'
                + 'This may take a couple of minutes if there are a number of record type linked to the requested field.<br>';
        }else if(type == 'term'){

            msg = 'Downloading vocabulary...<br><br>';
        }

        msg += 'This is a very complex procedure and sensitive to errors in the configuration of the source database.<br><br>'
                + 'Please report a bug if it fails (either with or without a message)<br>'
                + 'including the database and the definition you are trying to download, so that we can investigate and fix.';

        window.hWin.HEURIST4.msg.bringCoverallToFront(this.element, style, msg);

        window.hWin.HAPI4.SystemMgr.import_definitions(this._selectedDB, id, this._is_rename_target, type,
            function(response){    

                window.hWin.HEURIST4.msg.sendCoverallToBack(); 

                if(response.status == window.hWin.ResponseStatus.OK){

                    that.panel_report.find('#btn_close_panel_report').click();

                    let report = '';

                    if(response.report){
                    
                        if( window.hWin.HEURIST4.util.isArrayNotEmpty(response.report.added) ){
                            report = 'Added: ';
                            for(const idx in response.report.added){

                                const id = response.report.added[idx];
                                let label = '';

                                if(type == 'detailtype'){
                                    label = $Db.dty(id,'dty_Name');
                                }else if(type == 'term'){
                                    label = $Db.trm(id,'trm_Label');
                                }else{
                                    label = $Db.rty(id,'rty_Name');
                                }

                                label += response.report.translations[type].indexOf(id) !== false ? ' (translations retrieved)' : '';
                                report += (label+', ');    
                            }
                            report = report.slice(0, -2)+'<br>';
                        }
                        if( window.hWin.HEURIST4.util.isArrayNotEmpty(response.report.updated) ){
                            report += '<br>Updated: ';
                            for(const idx in response.report.updated){

                                const id = response.report.updated[idx];
                                let label = '';

                                if(type == 'detailtype'){
                                    label = $Db.dty(id,'dty_Name');
                                }else if(type == 'term'){
                                    label = $Db.trm(id,'trm_Label');
                                }else{
                                    label = $Db.rty(id,'rty_Name');
                                }

                                label += response.report.translations[type].indexOf(id) !== false ? ' (translations retrieved)' : '';
                                report += (label+', ');    
                            }
                            report = report.slice(0, -2);
                        }
                        if( window.hWin.HEURIST4.util.isArrayNotEmpty(response.report.broken_terms) ){
                            
                            report += ('<p>'+response.report.broken_terms.length
                                +' terms were not properly imported.'
                                +' Error report has been sent to Heurist support.<ul>');
                            
                            for(var i=0; i<response.report.broken_terms.length; i++){
                                report += ('<li>'+response.report.broken_terms[i][0]+'</li>');    
                                if(i>10){
                                    report += '...';
                                    break;
                                }
                            }
                            
                            report += ('</ul></p>');
                        }
                    }

                    if(report!=''){ 

                        //modal report
                        window.hWin.HEURIST4.msg.showMsgDlg('<br>'+report,null,
                                {title:'Import templates report'},
                                {default_palette_class:'ui-heurist-design'});

                    }else{
                        report = 'Nothing imported. '+
                        'The definition you selected to be imported is already in this database';

                        window.hWin.HEURIST4.msg.showMsgDlg(report);
                    }

                }else{
                    window.hWin.HEURIST4.msg.showMsgErr(response);
                }

            }
        );
        
    },

    _recordtypeListItemRenderer: function( recordset, record ){

        function fld(fldname){
            return window.hWin.HEURIST4.util.htmlEscape(recordset.fld(record, fldname));
        }
        function fld2(fldname, col_width){
            swidth = '';
            if(!window.hWin.HEURIST4.util.isempty(col_width)){
                swidth = ' style="width:'+col_width+'"';
            }
            return '<div class="item" '+swidth+'>'+window.hWin.HEURIST4.util.htmlEscape(recordset.fld(record, fldname))+'</div>';
        }

        var dbs = window.hWin.HEURIST4.remote;
        var recID = fld('rty_ID');

        var btn_actions = '<div style="width:60px;">'
        + '<div title="Click to show details" Xclass="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" data-key="expand" '
        + ' style="display:inline-block;height:16px;">'
        +     '<span style="padding-top: 6px;" class="ui-button-icon-primary ui-icon ui-icon-carat-'
        + ((dbs._selectedRtyID==recID)?'d':'r')+'"></span><span class="ui-button-text"></span>'
        + '</div>'
        + '<div title="Click to import this record type" Xclass="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" data-key="import" '
        + ' style="display:inline-block;height:16px;vertical-align:bottom;font-size:1.4em;padding-left:20px">'
        +     '<span class="ui-button-icon-primary ui-icon ui-icon-arrowthick-1-s" style="cursor:pointer"></span><span class="ui-button-text"></span>'
        + '</div></div>';

        var info = '';
        if(dbs._selectedRtyID==recID){
            var rts = dbs.rectypes.typedefs[recID];

            info = '<div style="border:2px solid blue;padding:10px 4px;margin-top:10px"><i>' + fld('rty_Description') + "</i><br><br>";   //description
            info += '<table style="text-align: left;font-size:0.9em; font-color:darkgray;width:100%"><tr>';
            info += '<th  style="padding-left:10px;" class=\"status\"><b>Already in DB?</b></th>';
            info += '<th style="padding-left:10px;"><b>Field name (used for this record type)</b></th>';
            info += '<th style="padding-left:10px;"><b>Base field name (shared across record types)</b></th>';
            info += '<th style="width:100px; padding-left:10px;"><b>Field data type</b></th></tr>';


            var idx_rst_Name  = dbs.rectypes.typedefs.dtFieldNamesToIndex.rst_DisplayName;
            var idx_rst_Type  = dbs.rectypes.typedefs.dtFieldNamesToIndex.dty_Type;
            var idx_rst_ccode = dbs.rectypes.typedefs.dtFieldNamesToIndex.dty_ConceptID;

            var dty;
            for (dty in rts.dtFields) {

                var rst_fld = rts.dtFields[dty];

                //find in local defintions by concept code - if found - it is already imported
                var local_id = $Db.getLocalID( 'dty', rst_fld[idx_rst_ccode]);  

                info += "<tr"+ (local_id>0? ' style="background-color:#CCCCCC;"' : "") +
                "</td><td style='padding-left:20px;'>" + (local_id>0 == 1? "yes" : "NEW") +
                "<td style='padding-left:10px; font-weight:bold'>" + rst_fld[idx_rst_Name] +
                "</td><td style='padding-left:10px;'>" + 
                ((dbs.detailtypes)?dbs.detailtypes.names[dty]:'') +
                "</td><td style='padding-left:10px;'>" + $Db.baseFieldType[rst_fld[idx_rst_Type]] +
                "</td></tr>";
            }//for
            info += "</table></div>";    
        }    

        var recTitle = fld2('rty_Name','15em');

        //find all dependent record types on first level

        let linked_rts = $Db.getLinkedRecordTypes(recID, dbs);

        var name_rts = [];
        for(var i=0;i<linked_rts.length;i++){
            name_rts.push(dbs.rectypes.names[linked_rts[i]]);
        }
        var linkedto = '';
        if(linked_rts.length>0){
            linkedto = 'Links to: '+ window.hWin.HEURIST4.util.htmlEscape(name_rts.join(','));
        }
        recTitle = recTitle + '<div class="item" style="font-style:italic;width:45em" title="Linked record types">'
        + linkedto +'</div>';


        var html = '<div class="recordDiv" style="min-height:16px"'
        +' id="rd'+recID+'" recid="'+recID+'">'
        + btn_actions
        + '<div class="recordTitle recordTitle2" title="'+fld('rty_Description')
        +'" style="right:10px;left:94px">'
        +     recTitle
        + '</div>'
        + info
        + '</div>';

        return html;
    },

    _detailtypeListItemRenderer: function(recordset, record){

        function fld(fldname){
            return window.hWin.HEURIST4.util.htmlEscape(recordset.fld(record, fldname));
        }
        function fld2(fldname, col_width, left_padding){

            let value = window.hWin.HEURIST4.util.htmlEscape(recordset.fld(record, fldname));

            let swidth = !window.hWin.HEURIST4.util.isempty(col_width) ? 'width:auto;max-width:' + col_width + ';' : '';
            let spadding = !window.hWin.HEURIST4.util.isempty(left_padding) ? 'padding-left:' + left_padding + ';' : '';
            let styling = !window.hWin.HEURIST4.util.isempty(swidth) || !window.hWin.HEURIST4.util.isempty(spadding) ? 'style="' + swidth + spadding + '"' : '';

            return '<div class="item" title="'+ value +'" '+styling+'>'+ value +'</div>';
        }

        let recID = fld('dty_ID');

        let btn_actions = '<div style="width:30px;">'
        + '<div title="Click to show details" Xclass="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" data-key="expand" '
        + ' style="display:inline-block;height:16px;"><span class="ui-button-text"></span>'
        + '</div>'
        + '<div title="Click to import this base field" Xclass="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" data-key="import" '
        + ' style="display:inline-block;height:16px;vertical-align:bottom;font-size:1.4em;">'
        +     '<span class="ui-button-icon-primary ui-icon ui-icon-arrowthick-1-s" style="cursor:pointer"></span><span class="ui-button-text"></span>'
        + '</div></div>';

        let name = fld2('dty_Name', '20em', '');
        let concept_code = fld2('dty_ConceptID', '60px', '15px');
        let type = fld2('dty_Type', '60px', '10px');
        let help_text = fld2('dty_HelpText', '50em', '10px');

        let html = '<div class="recordDiv" style="min-height:16px"'
        +' id="rd'+recID+'" recid="'+recID+'">'
        + btn_actions
        + '<div class="recordTitle recordTitle2" title="'+fld('dty_HelpText')
        +'" style="right:10px;left:35px;">'
        +     name
        +     concept_code
        +     type
        +     help_text
        + '</div></div>';

        return html;
    },

    _termsListItemRenderer: function(recordset, record){

        function fld(fldname){
            return window.hWin.HEURIST4.util.htmlEscape(recordset.fld(record, fldname));
        }
        function fld2(fldname, col_width, left_padding){

            let value = window.hWin.HEURIST4.util.htmlEscape(recordset.fld(record, fldname));

            let swidth = !window.hWin.HEURIST4.util.isempty(col_width) ? 'width:' + col_width + ';' : '';
            let spadding = !window.hWin.HEURIST4.util.isempty(left_padding) ? 'padding-left:' + left_padding + ';' : '';
            let styling = !window.hWin.HEURIST4.util.isempty(swidth) || !window.hWin.HEURIST4.util.isempty(spadding) ? 'style="' + swidth + spadding + '"' : '';

            return '<div class="item" title="'+ value +'" '+styling+'>'+ value +'</div>';
        }

        let dbs = window.hWin.HEURIST4.remote;
        let recID = fld('trm_ID');

        let btn_actions = '<div style="width:60px;">'
        + '<div title="Click to show details" Xclass="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" data-key="expand" '
        + ' style="display:inline-block;height:16px;">'
        +     '<span style="padding-top: 6px;" class="ui-button-icon-primary ui-icon ui-icon-carat-'
        + ((dbs._selectedTrmID==recID)?'d':'r')+'"></span><span class="ui-button-text"></span>'
        + '</div>'
        + '<div title="Click to import this base field" Xclass="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button" aria-disabled="false" data-key="import" '
        + ' style="display:inline-block;height:16px;vertical-align:bottom;font-size:1.4em;padding-left:20px">'
        +     '<span class="ui-button-icon-primary ui-icon ui-icon-arrowthick-1-s" style="cursor:pointer"></span><span class="ui-button-text"></span>'
        + '</div></div>';

        let info = '';
        if(dbs._selectedTrmID==recID){

            let child_terms = '<table style="text-align: left;font-size:0.9em; margin: 10px 0px 15px 25px;width:95%">'
                + '<colgroup>'
                    + '<col style="width: 150px;max-width: 150px;"><col style="width: 15px;"><col style="width: 50px;"><col style="width: 600px;">'
                + '</colgroup>';

            let child_count = 0;

            let idx_label = dbs.terms.fieldNamesToIndex.trm_Label;
            let idx_parent_terms = dbs.terms.fieldNamesToIndex.trm_ParentTermID;
            let idx_desc = dbs.terms.fieldNamesToIndex.trm_Description;
            let idx_code = dbs.terms.fieldNamesToIndex.trm_Code;
            let idx_ccode = dbs.terms.fieldNamesToIndex.trm_ConceptID;
            let idx_semantic = dbs.terms.fieldNamesToIndex.trm_SemanticReferenceURL;

            // list child terms (labels + decription)
            for(const id in dbs.terms.termsByDomainLookup.enum){

                if(id <= 0 || !dbs.terms.termsByDomainLookup.enum[id]){
                    continue;
                }

                let parent_terms = dbs.terms.termsByDomainLookup.enum[id][idx_parent_terms];
                if(parent_terms == null || parent_terms == '0'){
                    continue;
                }

                parent_terms = parent_terms.split(',');
                if(parent_terms.indexOf(recID) < 0){
                    continue;
                }

                if(child_count == 40){
                    child_terms += '<tr><td>...</td></tr>';
                    break;
                }

                let child_Label = dbs.terms.termsByDomainLookup.enum[id][idx_label];
                let child_Description = dbs.terms.termsByDomainLookup.enum[id][idx_desc];
                let child_Code = dbs.terms.termsByDomainLookup.enum[id][idx_code];
                let child_ccode = dbs.terms.termsByDomainLookup.enum[id][idx_ccode];
                let child_semanticuri = dbs.terms.termsByDomainLookup.enum[id][idx_semantic];
                let has_term = ($Db.getLocalID('trm', child_ccode) > 0) ? '&#10003;' : '&#10005;';

                let extra_dtls = '';
                if(!window.hWin.HEURIST4.util.isempty(child_Description) || !window.hWin.HEURIST4.util.isempty(child_Code)){
                    extra_dtls = window.hWin.HEURIST4.util.isempty(child_Description) ? child_Code : 
                        (window.hWin.HEURIST4.util.isempty(child_Code) ? child_Description : child_Code +' : '+ child_Description);
                }

                child_terms += '<tr>'
                    + '<td class="truncate" style="max-width: 150px;padding-top: 5px;" title="'+ child_Label +'">'+ child_Label +'</td>'
                    + '<td style="padding:0px 5px;">'+ has_term +'</td>'
                    + '<td>'+ child_ccode +'</td>'
                    + '<td class="truncate" style="max-width: 600px;" title="'+ extra_dtls +'">'+ extra_dtls +'</td>'
                + '</tr>';

                if(!window.hWin.HEURIST4.util.isempty(child_semanticuri)){
                    child_terms += '<tr><td colspan=4>'+child_semanticuri+'</td></tr>';
                }

                child_count++;
            }

            info += (child_terms == '') ? '' : (child_terms + '</table>');
        }    

        let label = fld2('trm_Label', '10em');
        let concept_code = fld2('trm_ConceptID', '60px', '15px');
        let domain = fld('trm_Domain') == 'relation' ? '<div class="item" style="width: 100px;">Can use for relations</div>' : '';

        let html = '<div class="recordDiv" style="min-height:16px"'
        +' id="rd'+recID+'" recid="'+recID+'">'
        + btn_actions
        + '<div class="recordTitle recordTitle2" title="'+fld('dty_HelpText')
        +'" style="right:10px;left:75px">'
        +     label
        +     concept_code
        +     domain
        + '</div>'
        + info
        + '</div>';

        return html;
    },

    // Apply filter values
    _filterEntities: function(){

        let cur_acc = this.entity_wrapper.tabs('option', 'active');

        let state = this.show_all.is(':checked');
        let search = this.general_search.val();

        if(cur_acc == 2){ // trm
            this.panel_trm_list.find('.searchForm #input_search').val(search);
            this.panel_trm_list.find('.searchForm #chb_show_already_in_db').prop('checked', true).change(); // always show all
        }else if(cur_acc == 1){ // dty
            this.panel_dty_list.find('.searchForm #input_search').val(search);
            this.panel_dty_list.find('.searchForm #chb_show_already_in_db').prop('checked', false).change(); // always hide those already in db
        }else{ // rty
            this.panel_rty_list.find('.searchForm #input_search').val(search);
            this.panel_rty_list.find('.searchForm #chb_show_already_in_db').prop('checked', state).change();
        }
    }

});