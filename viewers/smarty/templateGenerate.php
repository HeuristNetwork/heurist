<?php

/**
 * templateGenerate.php
 *
 * Generates the template on the basis of structure of record
 * type that are included in result of given query
 *
 * besides template text it returns the list of variables (array indexes) that are utilized
 * in this tempalte
 *
 * the result is JSON array
 *
 * @copyright (C) 2005-2010 University of Sydney Digital Innovation Unit.
 * @link: http://HeuristScholar.org
 * @license http://www.gnu.org/licenses/gpl-3.0.txt
 * @author Artem Osmakov
 * @version 2011.0819
 * @package Heurist academic knowledge management system
 * @todo
 **/

?>

<?php

define('SEARCH_VERSION', 1);

require_once(dirname(__FILE__).'/../../common/config/defineFriendlyServers.php');
require_once(dirname(__FILE__).'/../../common/config/initialise.php');
require_once(dirname(__FILE__).'/../../common/php/dbMySqlWrappers.php');
require_once(dirname(__FILE__).'/../../search/getSearchResults.php');
require_once(dirname(__FILE__).'/../../common/php/getRecordInfoLibrary.php');
require_once('libs.inc.php');

//error_log(">>>>>>>>>>>>>".print_r($_REQUEST, true));

	mysql_connection_db_select(DATABASE);

	//load definitions (USE CACHE)
	$rtStructs = getAllRectypeStructures(true);
	$dtStructs = getAllDetailTypeStructures(true);
	$dtTerms = getTerms(true);
	$recursion_depth = 0;
	$first_record = null;

	$resVars = array();
	$resVarsByType = array();

	$mode = @$_REQUEST['mode'];
	if($mode=='varsonly'){

		$rectypeID = @$_REQUEST['rty_id'];


		$res0 = getRecordHeaderSectionForSmarty(null, 'r', 0); //from

		$resVars = array_merge($resVars, $res0['vars']);

		/*
		array_push($resVarsByType, array("id"=>"0",
											"name"=>"common",
											"vars"=>$res0['vars'],
											"text"=>$res0['text'],
											"tree"=>$res0['tree'] ));
											*/

		$res = getRecordTypeSectionForSmarty($rectypeID, 'r', 0);

		//text for rectypes fill be inserted manually:  $resText  = $resText.$res['text'];
		$resVars = array_merge($resVars, $res['vars']);

		$res['tree']['r'] = array_merge($res0['tree']['r'], $res['tree']['r']);

		array_push($resVarsByType, array("id"=>$rectypeID,
										"name"=>$rtStructs['names'][$rectypeID],
										"vars"=>array_merge($res0['vars'], $res['vars']),
										"tree"=>$res['tree']));

		$qresult = loadSearch($_REQUEST);

		header("Content-type: text/javascript");
		echo json_format( array("vars"=>$resVarsByType,
								"vars2"=>$resVars,
								"records"=>$qresult["records"]), true);


	}else{

			$qresult = loadSearch($_REQUEST); //from search/getSearchResults.php - loads array of records based on GET request

			if(!array_key_exists('records',$qresult)){
			//error_log(">>>>>>>>NOTHING FOUND");
				echo "Nothing found. Impossible generate the template";
				exit();
			}

			//convert to array that will assigned to smarty variable
			$records =  $qresult["records"];

			//it is required to obtain name of header (common) fields only
			$first_record = $records[0];

			/*	$resText = '{* generated by h3 *}\n<style type="text/css">\n{literal}\n   .tlbl{min-width:150px;text-align:right;display:inline-block;}\n{/literal}\n</style>\n\n{foreach $results as $r}\n';*/

			$resText = _maketext(array('{* generated by h3 *}','{foreach $results as $r}'), 0);


			$recTypes = array();

			//creates
			$res = getRecordHeaderSectionForSmarty($first_record, 'r', 0); //from

			$resText  = $resText.$res['text'];
			$resVars = array_merge($resVars, $res['vars']);
			array_push($resVarsByType, array("id"=>"0",
											"name"=>"common",
											"vars"=>$res['vars'],
											"text"=>$res['text'],
											"tree"=>$res['tree'] ));

			//find all record type in result set
			foreach ($records as $rec){

				//generate entry for each record type only once
				$rectypeID = $rec['rec_RecTypeID'];
				$key = array_search($rectypeID, $recTypes);
			//error_log(">>>>>>rectypeID=".$rectypeID."   ex=".$key."   ".print_r($recTypes, true));
				if( !(is_numeric($key) && $key>=0) )
				{
					$res = getRecordTypeSectionForSmarty($rectypeID, 'r', 0);

					//text for rectypes fill be inserted manually:  $resText  = $resText.$res['text'];
					$resVars = array_merge($resVars, $res['vars']);

					array_push($resVarsByType, array("id"=>$rectypeID,
													"name"=>$rtStructs['names'][$rectypeID],
													"vars"=>$res['vars'],
													"text"=>$res['text'],
													"tree"=>$res['tree'] ));

					//$recTypes = array_merge($recTypes, array("".$recTypes=>"ABS"));
					array_push($recTypes, $rectypeID);
				}
			}

			$resVars = array_unique($resVars);

			$resText = $resText._maketext(array("{* INSERT YOUR CODE HERE *}","<hr/>","{/foreach}"), 0);

			header("Content-type: text/javascript");
			echo json_format( array("text"=>$resText,
									"vars"=>$resVarsByType,
									"vars2"=>$resVars), true);
	}

	//$tpl_vars = $smarty->get_template_vars();
	//var_dump($tpl_vars);


	//DEBUG stuff
	//@todo - return the list of record types - to obtain the applicable templates
	//echo "query result = ".print_r($qresult,true)."\n";
	//header("Content-type: text/javascript");

	//header('Content-type: text/html; charset=utf-8');
	//echo json_format( $qresult, true);
	//echo "<br/>***<br/>";

	//echo json_format( $results, true);
	//END DEBUG stuff

exit();

/**
* generates various line separator
* 1. as paragraphs for tinymcs
* 2. or \n for usual textarea
*
* @param mixed $lines
*/
function _maketext($lines, $ind){

	if($ind>0){
	 	$sep1 = '<div style="padding-left: '.(10*$ind).'px;">';
	}else{
		$sep1 = '<div>';
	}

	$sep2 = '</div>';
	//$sep1 = '';
	//$sep2 = '\n';

	$res = '';

	foreach ($lines as $line ){

		$pos1 = strpos($line,"{foreach");
		$pos2 = strpos($line,"{/foreach");
		if((is_numeric($pos1) && $pos1==0)||(is_numeric($pos2) && $pos2==0))
		{
			$line = "<div style='background-color:#ffcccc;'>".$line."</div>";
		}

		$res = $res.$sep1.$line.$sep2;
	}

	return $res;
}

//
// convert record or detail name string to PHP applicable variable name (index in smarty variable)
// for field(detail) type it will  in low case
//
function getVariableNameForSmarty($name, $is_fieldtype = true){

	global $mode;
//$dtname = strtolower(str_replace(' ','_',strtolower($dtNames[$dtKey]));
//'/[^(\x20-\x7F)\x0A]*/'     "/^[a-z0-9]+$/"
	if($mode=='varsonly'){
		return $name; //without changes
	}else{
		if($is_fieldtype){
			$name = strtolower($name);
		}

		$goodname = preg_replace('~[^a-z0-9]+~i','_', $name);
		$goodname = str_replace('__','_',$goodname);

		return $goodname;
	}
}

//
// @todo - labels or headers
//
function getRecordHeaderSectionForSmarty($rec, $parentName, $ind){

	$tree = array($parentName=>array());
	$vars = array();

	if(!$rec){ //for varsonly mode

		$key="ID";
		$name_wo_parent = 'rec'.$key;
		$name = $parentName.'.'.$name_wo_parent;
		$tree[$parentName] = array_merge($tree[$parentName], array($name_wo_parent=>$name));
		$vars = array_merge($vars, array($name=>$key));

		if($parentName!='r'){
			$key="RecTitle";
			$name_wo_parent = 'rec'.$key;
			$name = $parentName.'.'.$name_wo_parent;
			$tree[$parentName] = array_merge($tree[$parentName], array($name_wo_parent=>$name));
			$vars = array_merge($vars, array($name=>$key));
		}else{
			/*
			$key="Title";
			$name_wo_parent = 'rec'.$key;
			$name = $parentName.'.'.$name_wo_parent;
			$tree[$parentName] = array_merge($tree[$parentName], array($name_wo_parent=>$name));
			$vars = array_merge($vars, array($name=>$key));
			*/
		}

		$key="Modified";
		$name_wo_parent = 'rec'.$key;
		$name = $parentName.'.'.$name_wo_parent;
		$tree[$parentName] = array_merge($tree[$parentName], array($name_wo_parent=>$name));
		$vars = array_merge($vars, array($name=>$key));

      	return array("text"=>"", "vars"=>$vars, "tree"=>$tree);
	}
	else
	{

		$arr_text = array();
		$ind++;

		//loop for all record properties
		foreach ($rec as $key => $value){
			$pos = strpos($key,"rec_");
			if(is_numeric($pos) && $pos==0){
				//array_push($record, array(substr($key,4) => $value));
				$key = substr($key, 4); //label
				$name_wo_parent = 'rec'.$key;	   //wo parent
				$name = $parentName.'.'.$name_wo_parent;


				if($key=="RecTypeID"){  //instead of type id we add type name
					$key = "TypeName";
					$name_wo_parent = 'rec'.$key; //additional field
					$name = $parentName.'.'.$name_wo_parent;
					//array_push($vars, $name);
					$tree[$parentName] = array_merge($tree[$parentName], array($name_wo_parent=>$name));
					//array_push($tree[$parentName], array($name_wo_parent=>$name));
					$vars = array_merge($vars, array($name=>$key));
				}
				if($key=="ID" || $key=="Title" || $key=="TypeName" || $key=="URL"||
					$key=="RecTypeID" || $key=="Modified") {
					$tree[$parentName] = array_merge($tree[$parentName], array($name_wo_parent=>$name));
					$vars = array_merge($vars, array($name=>$key));
					array_push($arr_text, '{out2 lbl="'.$key.'" var=$'.$name.'}');

//					'{out lbl="'.$key.'" var=$'.$name.'}');

//OLD WAY			$text = $text.$ind.'<div><div class="tlbl">'.$key.': </div><b>{$'.$name.'}</b></div>';
//OLDEST WAY		table mode $text = $text.'<td>{$'.$name.'}</td>';
				}
				//TEMPORARY if(count($vars)>1) break;
			}
		}//for

		$text = _maketext($arr_text, $ind);

      	return array("text"=>$text, "vars"=>$vars, "tree"=>$tree);
	}
}

//
// Create tempalte on the base of record structure definition
// returns:
// 1. template text
// 2. array list of used variables
//
function getRecordTypeSectionForSmarty($recTypeId, $parentName, $ind){

	global $rtStructs, $recursion_depth, $mode;

	/*$rtNames = $rtStructs['names'];
	$recordTypeName = $rtNames[$rectypeID];
	$recordTypeName = getVariableNameForSmarty($recordTypeName, false);*/

	$ind = $ind++;

	$tree = array($parentName=>array());
	$vars = array();
	$arr_text = array();
	//IAN ask for comparison with rectype name $text = $ind.$ind.'{if ($'.$parentName.'.recRecTypeID=='.$recTypeId.')}\n'; //table mode<tr><td colspan="13">';
	$recTypeName = $rtStructs['names'][$recTypeId];
	array_push($arr_text, '{if ($'.$parentName.'.recTypeName=="'.$recTypeName.'")}');

	//get the list of details from record structure
	$details =  $rtStructs['typedefs'][$recTypeId]['dtFields'];


	foreach ($details as $dtKey => $dtValue){
		$recursion_depth = 0;

		$dt = getDetailSectionForSmarty($parentName, $dtKey, $dtValue, $ind);
		if($dt){
			array_push($arr_text, $dt['text']);
			$vars = array_merge($vars, $dt['vars']);

			$tree[$parentName] = array_merge($tree[$parentName], $dt['tree_children']);
			$tree = array_merge($tree, $dt['tree']);
		}
	}//for

	array_push($arr_text, '{/if}');
	$text = _maketext($arr_text, $ind);

	return array("text"=>$text, "vars"=>$vars, "tree"=>$tree);
}

/*
 $dtKey	 - detail type ID

 $dtValue - record type structure definition
*/
function getDetailSectionForSmarty($parentName, $dtKey, $dtValue, $ind){

	global $dtStructs, $rtStructs, $first_record, $recursion_depth, $mode;

	$dtNames = $dtStructs['names'];
	$rtNames = $rtStructs['names'];

	$dty_fi = $dtStructs['typedefs']['fieldNamesToIndex'];
	$rst_fi = $rtStructs['typedefs']['dtFieldNamesToIndex'];


	$ind++;

	if($dtNames[$dtKey]){

			$dtname_wo_parent = getVariableNameForSmarty($dtNames[$dtKey]);
			$dtname = $parentName.'.'.$dtname_wo_parent; //name of variable

			$dtDef = $dtStructs['typedefs'][$dtKey]['commonFields'];

	if($dtDef){

			$tree = array();
			$tree_children = array();
			$vars = array();
			$arr_text = array();

			$detailType = $dtDef[$dty_fi['dty_Type']];  //HARDCODED!!!!
			$dt_label 	= $dtValue[$rst_fi['rst_DisplayName']];
			$dt_tooltip = $dtValue[$rst_fi['rst_DisplayHelpText']]; //help text


//error_log(">>>>>>>".$dtKey."=".$dtNames[$dtKey].">>>".$dtname." TYPE=".$detailType);

			switch ($detailType) {
			/* @TODO
			case 'enum':
			break;
			case 'file':
			break;
			case 'relmarker':
			break;
			case 'relationtype':
			break;
			case 'geo':
			break;
			case 'calculated':
			break;
			case 'fieldsetmarker':
			break;
			*/
			case 'resource': // link to another record type

				$pointerRecTypeId = $dtValue[$rst_fi['rst_PtrFilteredIDs']]; //@TODO!!!!! it may be comma separated string


//error_log(">>>>>>>".$dt_label." array :".$pointerRecTypeId); //print_r($pointerRecTypeId, false) );

				//load this record
				if($recursion_depth<2 && ($mode=='varsonly' || array_key_exists($pointerRecTypeId, $rtNames))) {

				$recursion_depth++;

				if($mode=='varsonly'){
					$recordTypeName = $dt_label;
				}else{
					$recordTypeName = $rtNames[$pointerRecTypeId];
					$recordTypeName = getVariableNameForSmarty($recordTypeName, false);
				}

//error_log($dt_label.">>>>".$parentName."  rectypename=".$recordTypeName."  DET KEY=".$dtKey."  RECORD TYPE ID=".$pointerRecTypeId);


//<div style="padding-left:10px;border:solid aqua 1px;">

//OLD WAY				$text = $ind.'<div class="tlbl" style="vertical-align:top;">'.$dt_label.':</div>'.$ind.'{foreach $'.$parentName.'.'.$recordTypeName.'s as $'.$recordTypeName.'}'.$ind.'<div style="display:inline-block;">\n';


				$_fe = array($dt_label,'{foreach $'.$parentName.'.'.$recordTypeName.'s as $'.$recordTypeName.'}');

				array_push($arr_text, _maketext($_fe, $ind));

				//creates headers
				$res2 = getRecordHeaderSectionForSmarty($first_record, $recordTypeName, $ind); //from

				array_push($arr_text, $res2['text']);
				$vars = array_merge($vars, $res2['vars']);

				$tree = $res2['tree'];

				if($recursion_depth>1){
					//$tree_children = array_merge($tree_children, $res2['tree']);
				}else{

				}

				if(array_key_exists($pointerRecTypeId, $rtNames)){

				//$tree[$recordTypeName] = array_merge($tree[$recordTypeName], $res2['tree']);

				//get the list of details from this record
				$details =  $rtStructs['typedefs'][$pointerRecTypeId]['dtFields'];
/*TEMP - to avoid self recursion*/
				//no need $text  = $text.'\n<tr><td colspan="13">';

				foreach ($details as $dtKey2 => $dtValue2){
					$dt = getDetailSectionForSmarty($recordTypeName, $dtKey2, $dtValue2, $ind);
					if($dt){
						array_push($arr_text, $dt['text']);
						$vars = array_merge($vars, $dt['vars']);

						if(false && $recursion_depth>1){
							//$res2[$recordTypeName] = array_merge($res2[$recordTypeName], $dt['tree_children']);
							//$res2 = array_merge($res2, $dt['tree']);
						}else{



							$tree[$recordTypeName] = array_merge($tree[$recordTypeName], $dt['tree_children']); //detail fields

							if($recursion_depth>1){
								$tree[$recordTypeName] = array_merge($tree[$recordTypeName], $dt['tree']);
							}else{
								$tree = array_merge($tree, $dt['tree']); //assign first level records to root
							}
						}
					}
				}//for
				///no need $text = $text.'</td></tr>\n';
				/*
				if($recursion_depth>1){
error_log(">>>>            ");
error_log(">>>>            ".print_r($res2['tree'], true));
					$tree = array_merge($tree, $res2['tree']);
				}*/

				}//array_key_exists($pointerRecTypeId, $rtNames))

				array_push($arr_text, '{/foreach}');
				array_push($arr_text, '');

				}

/*
				//@todo - parsing will depend on depth level
				// if there are not mentions about this record type in template (based on obtained array of variables)
				// we will create href link to this record
				// otherwise - we have to obtain this record (by ID) and add subarray

				$res = array();
				$rectypeID = null;

				foreach ($dtValue as $key => $value){
//error_log(">>>>>>>>>>".array_key_exists('id',$value));
					if (array_key_exists('id',$value))
					{
						//this is record ID
						$recordID = $value['id'];
						//get full record info
						$record = loadRecord($recordID); //from search/getSearchResults.php
						$res0 = getRecordForSmarty($record); //@todo - need to

						if($res0){
							array_push($res, $res0);
							if($rectypeID==null){
								$rectypeID = $res0['recRecTypeID'];
							}
						}
					}
				}//for each

				if( count($res)>0 && array_key_exists($rectypeID, $rtNames))
				{
					$recordTypeName = $rtNames[$rectypeID];
					$recordTypeName = getVariableNameForSmarty($recordTypeName, false);
//error_log(">>>>>>>>>>".$rectypeID."=".$rtNames[$rectypeID]."=".$recordTypeName);
					$res = array( $recordTypeName."s" =>$res, $recordTypeName =>$res[0] );
				}else{
					$res = null;
				}
*/
			break;

			default:
//:&nbsp;
				//array_push($vars, $dtname);
				$tree_children = array_merge($tree_children, array($dtname_wo_parent=>$dtname));
				$vars = array_merge($vars, array($dtname=>$dt_label));
				array_push($arr_text, '{out2 lbl="'.$dt_label.'" var=$'.$dtname.'}');

			}//end switch

			$text = _maketext($arr_text, $ind);

		return array("text"=>$text, "vars"=>$vars, 'tree_children'=>$tree_children, 'tree'=>$tree);

	} else {
		return null; //detail type not found in detailTypes.typedefs
	}
	} else { //name is not defined
			return null;
	}

}


?>
