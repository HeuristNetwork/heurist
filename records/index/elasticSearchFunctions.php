<?php

    /*
    * Copyright (C) 2005-2014 University of Sydney
    *
    * Licensed under the GNU License, Version 3.0 (the "License"); you may not use this file except
    * in compliance with the License. You may obtain a copy of the License at
    *
    * http://www.gnu.org/licenses/gpl-3.0.txt
    *
    * Unless required by applicable law or agreed to in writing, software distributed under the License
    * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
    * or implied. See the License for the specific language governing permissions and limitations under
    * the License.
    */

    /**
    * Functions to index and search for records using Elastic Search
    *

    * @author      Ian Johnson   <ian.johnson@sydney.edu.au>
    * @author      Artem Osmakov   <artem.osmakov@sydney.edu.au>
    * @copyright   (C) 2005-2014 University of Sydney
    * @link        http://Sydney.edu.au/Heurist
    * @version     3.2.0
    * @license     http://www.gnu.org/licenses/gpl-3.0.txt GNU License 3.0
    * @package     Heurist academic knowledge management system
    * @subpackage  !!!subpackagename for file such as Administration, Search, Edit, Application, Library
    */

    /* 
    Elastic Search creates indexes automatically and updates the index record when new data is supplied for an existing key 
    However we do need to delete keys explicitely if 1. the record type changes or 2. we delete the record altogether
    Test for installation allows us to fall back to ordinary searching or render warning that feature is not supported

    ACTIONS TODO:

    Call updateRecordIndexEntry whenever a record is written (new or updated, from record edit or record import or record recode)

    Run buildAllIndices as part of database upgrade 1.1.0 to 1.2.0

    Call deleteRecordIndexEntry whenever a record is saved with a different type (editRecord)

    Call deleteRecordIndexEntry whenever a record is deleted (Search Actions)

    */


    // **************************************************************************************************************** 
    /**
    * Test whether Elastic Search is installed/operational
    * @returns  Returns CURL result code, 0 if OK, >0 indicates error
    */
    function testElasticSearchOK () {
        $url="$indexServerAddress:$indexServerPort"; // Set in configIni.php, address can be blank (not set), default port is 9200
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_GET, true);
        $data = curl_exec($ch);
        $error = curl_error($ch);
        if ($error) {
            $code = intval(curl_getinfo($ch, CURLINFO_HTTP_CODE));
            error_log("Failed to contact ElasticSearch server: $error ($code)" . " url = ". $url);
            curl_close($ch);
            return($code);
        } else {
            return(0);
        }
    } //testElasticSearchOK



    // **************************************************************************************************************** 
    /**
    * Remove uppercase letters from database name (Elastic Search rejects uppercase)
    * @param    $dbname - the database name to be converted to lower case
    * @returns  Returns corrected database name
    */
    function sanitiseForES ($dbname) {
        $dbname_new=strtolower($dbname);
        if ($dbname == $dbname_new) {
            return($dbname); // no change
        } else {
            $dbname_new = $dbname_new + "_nocaps"; // disambiguate eg. MyDB and mydb
            return($dbname_new);
        }      
    } //testElasticSearchOK



    // **************************************************************************************************************** 
    /**
    * Add a new key or update an existing key - Elastic Search adds or updates as appropriate, no need to specify
    * @param $dbName        The name of the Heurist databasem, excluding prefix
    * @param $recTypeID     The record type ID of the record being indexed
    * @param $jsonRecData   A JSon representation of the record generated by renderRecordAsJson
    * @return               curl return code, 0 = success
    */  
    function updateRecordIndexEntry ($dbName, $recTypeID, $recID, $jsonRecData) {
        $url="$indexServerAddress:$indexServerPort/$dbname/$recTypeID/$recID -d'$jsonRecData'";    
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_PUT, true);
        $data = curl_exec($ch);
        $error = curl_error($ch);
        if ($error) {
            $code = intval(curl_getinfo($ch, CURLINFO_HTTP_CODE));
            error_log("$error ($code)" . " url = ". $url);
            curl_close($ch);
            return $code;
        } else {
            return(0);
        }
    } // addUpdateRecordIndex


    // **************************************************************************************************************** 
    /**
    * Return a JSon array containing current record. Fields are identified by base field codes
    * @param $recID = record to be rendered, set to 0 to render current record being edited  
    */  
    function renderRecordAsJson ($recID) {

        /* 
        TO DO: render a specific record or the current record in memory as json 
        */

    } // currentRecordAsJson


    // **************************************************************************************************************** 
        // Note: Reported bug in PHP @ 18/11/13: must reset to NULL to obtain internal default. 
        //       Resetting directly to eg. PUT or GET will not reset, it will remain set as DELETE
    // **************************************************************************************************************** 

        
    // **************************************************************************************************************** 
    /**
    * Delete the index entry for a specified record - use when record type changed or record deleted
    * @param $dbName        The name of the Heurist databasem, excluding prefix
    * @param $recTypeID     The record type ID of the record being deleted from the index
    * @param $recID         The record to be deleted from the index 
    * @return               curl return code, 0 = success
    */
    function deleteRecordIndexEntry ($dbName, $recTypeID, $recID ) {
        $url="$indexServerAddress:$indexServerPort/$dbname/$recTypeID/$recID";    
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        $data = curl_exec($ch);
        $error = curl_error($ch);
        if ($error) {
            $code = intval(curl_getinfo($ch, CURLINFO_HTTP_CODE));
            error_log("$error ($code)" . " url = ". $url);
            curl_close($ch);
            return $code;
        } else {
            return(0);
        }
    } // deleteRecordIndex


    // **************************************************************************************************************** 
    /**
    * Delete the index for a specified record type
     * @param $dbName       The name of the Heurist databasem, excluding prefix
    *  @param $recTypeID    The record type ID of the record being deleted from the index
    */
    function deleteIndexForRectype ($dbName, $recTypeID) {
    // TODO: check that this is correct spec for deletion of the index for a record type
        $url="$indexServerAddress:$indexServerPort/$dbname/$recTypeID";    
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        $data = curl_exec($ch);
        $error = curl_error($ch);
        if ($error) {
            $code = intval(curl_getinfo($ch, CURLINFO_HTTP_CODE));
            error_log("$error ($code)" . " url = ". $url);
            curl_close($ch);
            return $code;
        } else {
            return(0);
        } 
    } // deleteIndexForRectype


    // **************************************************************************************************************** 
    /**
    * Delete the index for a specified database
     * @param $dbName       The name of the Heurist databasem, excluding prefix
    */
    function deleteIndexForDatabase ($dbName) {
    // TODO: check that this is correct spec for deletion of the index for a database
        $url="$indexServerAddress:$indexServerPort/$dbname";    
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        $data = curl_exec($ch);
        $error = curl_error($ch);
        if ($error) {
            $code = intval(curl_getinfo($ch, CURLINFO_HTTP_CODE));
            error_log("$error ($code)" . " url = ". $url);
            curl_close($ch);
            return $code;
        } else {
            return(0);
        }
    } // deleteIndexForDatabase


    // **************************************************************************************************************** 
    /**
    * Rebuild the index for a specified record type
    * @param   
    * @param    
    */
    function buildIndexForRectype ($dbName, $recTypeID) {

        deleteIndexForRectype ($dbName, $recTypeID); // clear the existing index

        /* TODO: 
        Read all records of given type, 
        call renderRecordAsJson to create JSon object for each record 
        call updateRecordIndexEntry to add record to index 
        */


    } // buildIndexForRectype


    // **************************************************************************************************************** 
    /**
    * Rebuild the index for a specified record type
    * @param  
    * @param    
    */
    function buildAllIndices ($dbName) {

        /* TODO:

        Loop through all record types
        deleteIndexForRectype ($dbName, $recTypeID); // clear the existing index
        buildIndexForRectype ($dbName, $recTypeID); // build index for specified record type

        */

    } // buildAllIndices

?>
